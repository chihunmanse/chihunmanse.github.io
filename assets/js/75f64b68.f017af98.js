"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7667],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var r=n(6540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),g=s,y=p["".concat(u,".").concat(g)]||p[g]||l[g]||i;return n?r.createElement(y,a(a({ref:t},c),{},{components:n})):r.createElement(y,a({ref:t},c))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,a=new Array(i);a[0]=g;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:s,a[1]=o;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3037:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(8168),s=(n(6540),n(5680));const i={title:"NestJS & MongoDB Project",tags:["NestJS"],sidebar_position:4},a="NestJS Project",o={unversionedId:"project/nest",id:"project/nest",title:"NestJS & MongoDB Project",description:"\uae30\uac04: 2022-01-17 ~ 2022-01-28",source:"@site/docs/05-project/04-nest.md",sourceDirName:"05-project",slug:"/project/nest",permalink:"/project/nest",draft:!1,tags:[{label:"NestJS",permalink:"/tags/nest-js"}],version:"current",sidebarPosition:4,frontMatter:{title:"NestJS & MongoDB Project",tags:["NestJS"],sidebar_position:4},sidebar:"docs",previous:{title:"\uc6d0\ud2f0\ub4dc \ud504\ub9ac\uc628\ubcf4\ub529 8percent \uae30\uc5c5\uacfc\uc81c",permalink:"/project/preonboarding-8percent"}},u={},d=[{value:"ENDPOINT",id:"endpoint",level:2},{value:"Code",id:"code",level:2},{value:"POST /users/signup (\ud68c\uc6d0\uac00\uc785)",id:"post-userssignup-\ud68c\uc6d0\uac00\uc785",level:3},{value:"POST /users/signin (\ub85c\uadf8\uc778)",id:"post-userssignin-\ub85c\uadf8\uc778",level:3},{value:"GET /products/keyword (\uc0c1\ud488 \uc870\ud68c)",id:"get-productskeyword-\uc0c1\ud488-\uc870\ud68c",level:3},{value:"POST /products/like (\uc0c1\ud488 \uc88b\uc544\uc694)",id:"post-productslike-\uc0c1\ud488-\uc88b\uc544\uc694",level:3},{value:"GET /products/like (\uc88b\uc544\uc694\ud55c \uc0c1\ud488 \uc870\ud68c)",id:"get-productslike-\uc88b\uc544\uc694\ud55c-\uc0c1\ud488-\uc870\ud68c",level:3},{value:"\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \ucd94\uac00, \uc218\uc815, \uc0ad\uc81c, \uc870\ud68c",id:"\uc7a5\ubc14\uad6c\ub2c8-\uc544\uc774\ud15c-\ucd94\uac00-\uc218\uc815-\uc0ad\uc81c-\uc870\ud68c",level:3},{value:"\ub9ac\ubdf0 \uc0dd\uc131, \uc218\uc815, \uc0ad\uc81c, \uc870\ud68c",id:"\ub9ac\ubdf0-\uc0dd\uc131-\uc218\uc815-\uc0ad\uc81c-\uc870\ud68c",level:3},{value:"POST /image/upload (\uc774\ubbf8\uc9c0 \ud30c\uc77c \uc5c5\ub85c\ub4dc)",id:"post-imageupload-\uc774\ubbf8\uc9c0-\ud30c\uc77c-\uc5c5\ub85c\ub4dc",level:3}],c={toc:d},p="wrapper";function l(e){let{components:t,...n}=e;return(0,s.yg)(p,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"nestjs-project"},"NestJS Project"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\uae30\uac04: 2022-01-17 ~ 2022-01-28")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"Stack: TypeScript, NestJS, MongoDB, Mongoose")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},(0,s.yg)("a",{parentName:"strong",href:"https://github.com/chihunmanse/nest-api"},"Github \ub9c1\ud06c"))),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},(0,s.yg)("a",{parentName:"strong",href:"https://documenter.getpostman.com/view/17663987/UVe9QUfM"},"API Document"))),(0,s.yg)("h2",{id:"endpoint"},"ENDPOINT"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"POST /users/signup (\ud68c\uc6d0\uac00\uc785)"),(0,s.yg)("li",{parentName:"ul"},"POST /users/signin (\ub85c\uadf8\uc778)"),(0,s.yg)("li",{parentName:"ul"},"GET /users/reviews (\uc791\uc131 \ub9ac\ubdf0 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"GET /categories (\uc804\uccb4 \uce74\ud14c\uace0\ub9ac \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"GET /categories/:id (\uce74\ud14c\uace0\ub9ac \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"GET /products (\uc804\uccb4 \uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"GET /products/keyword (\uce74\ud14c\uace0\ub9ac&\uac80\uc0c9\uc5b4\ub85c \uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"GET /products/:id (\uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"POST /products/like (\uc0c1\ud488 \uc88b\uc544\uc694)"),(0,s.yg)("li",{parentName:"ul"},"GET /products/like (\uc88b\uc544\uc694\ud55c \uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"POST /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \ucd94\uac00)"),(0,s.yg)("li",{parentName:"ul"},"PATCH /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \uc218\uc815)"),(0,s.yg)("li",{parentName:"ul"},"DELETE /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \uc0ad\uc81c)"),(0,s.yg)("li",{parentName:"ul"},"GET /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"POST /products/reviews/:productId (\ub9ac\ubdf0 \uc0dd\uc131)"),(0,s.yg)("li",{parentName:"ul"},"GET /products/reviews/:productId (\ub9ac\ubdf0 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"PUT /products/reviews/:reviewId (\ub9ac\ubdf0 \uc218\uc815)"),(0,s.yg)("li",{parentName:"ul"},"DELETE /products/reviews/:reviewId (\ub9ac\ubdf0 \uc0ad\uc81c)"),(0,s.yg)("li",{parentName:"ul"},"POST /image/upload (\uc774\ubbf8\uc9c0 \ud30c\uc77c \uc5c5\ub85c\ub4dc)")),(0,s.yg)("h2",{id:"code"},"Code"),(0,s.yg)("h3",{id:"post-userssignup-\ud68c\uc6d0\uac00\uc785"},"POST /users/signup (\ud68c\uc6d0\uac00\uc785)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="users.schema.ts"',title:'"users.schema.ts"'},'export class User extends Document {\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @Prop({\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Prop({\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @Prop({\n    default: 50000,\n  })\n  @IsNumber()\n  @IsNotEmpty()\n  point: number;\n\n  readonly readOnlyData: {\n    id: string;\n    email: string;\n    name: string;\n    point: number;\n  };\n}\n\nUserSchema.virtual("readOnlyData").get(function (this: User) {\n  return {\n    id: this.id,\n    email: this.email,\n    name: this.name,\n    point: this.point,\n  };\n});\n')),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"readonly"),"\ub77c\ub294 ",(0,s.yg)("inlineCode",{parentName:"p"},"password"),"\ub97c \uc81c\uc678\ud55c virtual \ud544\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc720\uc800 \uc815\ubcf4 \uc870\ud68c\uc2dc\uc5d0 \uc0ac\uc6a9\ud558\uc600\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="users.controller.ts"',title:'"users.controller.ts"'},'@Controller("users")\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly authService: AuthService,\n    private readonly reviewsService: ReviewsService\n  ) {}\n\n  @Post("signup")\n  async signUp(@Body() body: SignUpRequestDto) {\n    return await this.usersService.signUp(body);\n  }\n}\n')),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="signup.request.dto.ts"',title:'"signup.request.dto.ts"'},'import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from "class-validator";\n\nexport class SignUpRequestDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[A-Za-z\\d!@#$%^&*()]{8,30}$/)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @MaxLength(20)\n  name: string;\n}\n')),(0,s.yg)("p",null,"\ud68c\uc6d0\uac00\uc785 \uc694\uccad\uc5d0\uc11c body\uc5d0 \ub300\ud55c dto\ub97c \ub530\ub85c \uc0dd\uc131\ud558\uace0 class-validator\uc758 \ub370\ucf54\ub808\uc774\ud130\ub4e4\uc744 \ud65c\uc6a9\ud558\uc5ec \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \uc218\ud589\ud588\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="users.service.ts"',title:'"users.service.ts"'},'@Injectable()\nexport class UsersService {\n  constructor(private readonly usersRepository: UsersRepository) {}\n\n  async signUp(body: SignUpRequestDto) {\n    const { email, name, password } = body;\n\n    const isUserExist = await this.usersRepository.existsByEmail(email);\n    if (isUserExist) throw new HttpException("DUPLICATE_EMAIL", 409);\n\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    const user = await this.usersRepository.createUser({\n      email,\n      name,\n      password: hashedPassword,\n    });\n\n    return user.readOnlyData;\n  }\n}\n')),(0,s.yg)("p",null,"bcrypt\ub97c \ud1b5\ud574 \ube44\ubc00\ubc88\ud638\ub97c \uc554\ud638\ud654\ud558\uc5ec \uc720\uc800\ub97c \uc0dd\uc131\ud55c\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="users.repository.ts"',title:'"users.repository.ts"'},"@Injectable()\nexport class UsersRepository {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model<User>\n  ) {}\n\n  async existsByEmail(email: string): Promise<boolean> {\n    const result = await this.userModel.exists({ email });\n    return result;\n  }\n\n  async createUser(user: SignUpRequestDto): Promise<User> {\n    return await this.userModel.create(user);\n  }\n}\n")),(0,s.yg)("p",null,"DB \uc791\uc5c5\uc744 \ud558\ub294 \ud568\uc218\ub4e4\uc744 repository\uc5d0 \ub530\ub85c \uc791\uc131\ud558\uc5ec service\uc5d0\uc11c \ud65c\uc6a9\ud558\uc600\ub2e4."),(0,s.yg)("h3",{id:"post-userssignin-\ub85c\uadf8\uc778"},"POST /users/signin (\ub85c\uadf8\uc778)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.service.ts"',title:'"auth.service.ts"'},"async jwtLogIn(data: LoginRequestDto) {\n    const { email, password } = data;\n\n    const user = await this.usersRepository.findUserByEmail(email);\n\n    if (!user) throw new UnauthorizedException('INVALID_EMAIL');\n\n    const isPasswordValidated: boolean = await bcrypt.compare(\n      password,\n      user.password,\n    );\n\n    if (!isPasswordValidated)\n      throw new UnauthorizedException('INVALID_PASSWORD');\n\n    const payload = { id: user.id };\n\n    return {\n      token: this.jwtService.sign(payload),\n    };\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="login.request.dto.ts"',title:'"login.request.dto.ts"'},'import { PickType } from "@nestjs/mapped-types";\nimport { User } from "src/users/users.schema";\n\nexport class LoginRequestDto extends PickType(User, [\n  "email",\n  "password",\n] as const) {}\n')),(0,s.yg)("h3",{id:"get-productskeyword-\uc0c1\ud488-\uc870\ud68c"},"GET /products/keyword (\uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.schema.ts"',title:'"products.schema.ts"'},'@Schema(options)\nexport class Product extends Document {\n  @Prop({\n    type: Category,\n    required: true,\n    ref: "Category",\n  })\n  @IsNotEmpty()\n  category: Category;\n\n  @Prop({\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Prop({\n    required: false,\n  })\n  @IsString()\n  thumbnailImage: string;\n\n  @Prop({\n    required: true,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  price: number;\n\n  @Prop({\n    default: 0,\n  })\n  @IsNumber()\n  likeCount: number;\n\n  @Prop({\n    type: Object,\n  })\n  @IsObject()\n  likeUsers: object;\n\n  @Prop()\n  recentReviews: Review[];\n}\n')),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.controller.ts"',title:'"products.controller.ts"'},"@Get('keyword')\n  async getProductByKeyword(\n    @Query(QueryValidationPipe) query: ProductByKeywordRequestDto,\n  ) {\n    return await this.productsService.getProductByKeyword(query);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="query.validation.pipe.ts"',title:'"query.validation.pipe.ts"'},'@Injectable()\nexport class QueryValidationPipe implements PipeTransform {\n  transform(value: any) {\n    const { category, offset, limit } = value;\n    if (!isValidObjectId(category))\n      throw new BadRequestException("INVALID_CATEGORY_ID");\n\n    if (offset < 0) throw new BadRequestException("INVALID_OFFSET");\n    if (limit < 0) throw new BadRequestException("INVALID_LIMIT");\n    return value;\n  }\n}\n')),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"category"),"\uac12\uc774 objectId \ud615\uc2dd\uc774 \ub9de\ub294\uc9c0, ",(0,s.yg)("inlineCode",{parentName:"p"},"offset"),"\uacfc ",(0,s.yg)("inlineCode",{parentName:"p"},"limit"),"\uc774 \uc591\uc218\uc778\uc9c0\uc5d0 \ub300\ud574 \uccb4\ud06c\ud558\uae30 \uc704\ud574 \uc694\uccad\uc758 query \uac12\uc5d0 \ub300\ud574 \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \uc218\ud589\ud558\ub294 pipe\ub97c \ub530\ub85c \uc791\uc131\ud558\uc600\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="productByKeyword.request.dto.ts"',title:'"productByKeyword.request.dto.ts"'},"export class ProductByKeywordRequestDto {\n  category: string | null;\n\n  sort: string | null;\n\n  offset: number | null;\n\n  limit: number | null;\n\n  search: string | null;\n}\n")),(0,s.yg)("p",null,"\uc0c1\ud488 \uc870\ud68c\uc2dc\uc5d0 \ud544\ud130\ub9c1 \ubc0f \uc194\ud305\uc5d0 \uc0ac\uc6a9\ub418\ub294 query\uc5d0 \ub300\ud55c dto\uc774\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"async findProductByKeyword(\n    query: ProductByKeywordRequestDto,\n  ): Promise<Product[]> {\n    const { category, sort, offset = 0, limit = 10, search } = query;\n    const sortBy = {\n      lowPrice: 'price',\n      highPrice: '-price',\n      likeCount: '-likeCount',\n    };\n    const filterQuery = new Query();\n    if (category) {\n      filterQuery.find({ 'category._id': category });\n    }\n    const products = await this.productModel\n      .find(filterQuery)\n      .or([\n        { name: new RegExp(search) },\n        { 'category.name': new RegExp(search) },\n      ])\n      .select(['-category', '-likeUsers', '-recentReviews'])\n      .skip(offset)\n      .limit(limit)\n      .sort(sortBy[sort]);\n\n    return products;\n  }\n")),(0,s.yg)("h3",{id:"post-productslike-\uc0c1\ud488-\uc88b\uc544\uc694"},"POST /products/like (\uc0c1\ud488 \uc88b\uc544\uc694)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.schema.ts"',title:'"products.schema.ts"'},"@Prop({\n    default: 0,\n  })\n  @IsNumber()\n  likeCount: number;\n\n  @Prop({\n    type: Object,\n  })\n  @IsObject()\n  likeUsers: object;\n")),(0,s.yg)("p",null,(0,s.yg)("img",{parentName:"p",src:"https://i.ibb.co/fQCyWNK/2022-01-28-4-10-08.png",alt:"img1"})),(0,s.yg)("p",null,"products\uc5d0 ",(0,s.yg)("inlineCode",{parentName:"p"},"likeUsers"),"\ub77c\ub294 object \ud0c0\uc785\uc758 \ud544\ub4dc\ub97c \uc0dd\uc131\ud558\uace0 \uc720\uc800\uac00 \uc88b\uc544\uc694\ud55c \uc0c1\ud488\ub4e4\uc744 \uc870\ud68c\ud560 \ub54c \uac80\uc0c9\uc18d\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574 array \ud0c0\uc785\uc774 \uc544\ub2cc \uc88b\uc544\uc694\ud55c \uc720\uc800\uc758 objectId\ub97c \ud0a4 \uac12\uc73c\ub85c \uac1d\uccb4\uc5d0 \ub370\uc774\ud130\ub97c \ucd94\uac00\ud558\uc600\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.controller.ts"',title:'"products.controller.ts"'},"@UseGuards(JwtAuthGuard)\n  @Post('like')\n  async updateLikeUser(\n    @Body('productId', ObjectIdValidationPipe) productId: string,\n    @LogInUser() user: User,\n  ) {\n    return this.productsService.updateLikeUser(productId, user._id);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.service.ts"',title:'"products.service.ts"'},"async updateLikeUser(productId: string, userId: string) {\n    const isProductExist = await this.productsRepository.existsById(productId);\n\n    if (!isProductExist) throw new BadRequestException('INVALID_PRODUCT_ID');\n\n    const isLikeExist = await this.productsRepository.existsLike(\n      productId,\n      userId,\n    );\n\n    if (!isLikeExist) {\n      const result = await this.productsRepository.addLikeUser(\n        productId,\n        userId,\n      );\n      return result;\n    } else {\n      const result = await this.productsRepository.deleteLikeUser(\n        productId,\n        userId,\n      );\n      return result;\n    }\n  }\n")),(0,s.yg)("p",null,"\uc720\uc800\uac00 \uc774\ubbf8 \uc88b\uc544\uc694\ud55c \uc0c1\ud488\uc774\ub77c\uba74 ",(0,s.yg)("inlineCode",{parentName:"p"},"likeUsers")," object\uc5d0\uc11c \uc720\uc800\uc758 key\uac12\uc744 \uc0ad\uc81c\ud558\uace0 \uc88b\uc544\uc694\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 \uc720\uc800\uc758 key\uac12\uc744 \uc0dd\uc131\ud55c\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"    async existsLike(productId: string, userId: string): Promise<boolean> {\n    const key = `likeUsers.${userId}`;\n    const query = {\n      _id: productId,\n    };\n    query[key] = true;\n\n    const result = await this.productModel.exists(query);\n    return result;\n  }\n\n  async addLikeUser(productId: string, userId: string): Promise<Product> {\n    const key = `likeUsers.${userId}`;\n    const query = {};\n    query[key] = true;\n\n    const result = await this.productModel\n      .findOneAndUpdate(\n        { _id: productId },\n        {\n          $set: query,\n          $inc: { likeCount: 1 },\n        },\n        {\n          new: true,\n        },\n      )\n      .select('likeCount');\n    return result;\n  }\n\n  async deleteLikeUser(productId: string, userId: string): Promise<Product> {\n    const key = `likeUsers.${userId}`;\n    const query = {};\n    query[key] = true;\n\n    const result = await this.productModel\n      .findOneAndUpdate(\n        { _id: productId },\n        {\n          $unset: query,\n          $inc: { likeCount: -1 },\n        },\n        {\n          new: true,\n        },\n      )\n      .select('likeCount');\n    return result;\n  }\n")),(0,s.yg)("h3",{id:"get-productslike-\uc88b\uc544\uc694\ud55c-\uc0c1\ud488-\uc870\ud68c"},"GET /products/like (\uc88b\uc544\uc694\ud55c \uc0c1\ud488 \uc870\ud68c)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.controller.ts"',title:'"products.controller.ts"'},"@UseGuards(JwtAuthGuard)\n  @Get('like')\n  async getLikeProduct(@LogInUser() user: User) {\n    return this.productsService.getLikeProduct(user._id);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.repository.ts"',title:'"products.repository.ts"'},"async findLikeProduct(userId: string): Promise<Product[]> {\n    const key = `likeUsers.${userId}`;\n    const query = {};\n    query[key] = true;\n\n    const likeProducts = await this.productModel\n      .find(query)\n      .select(['-category', '-likeUsers']);\n    return likeProducts;\n  }\n")),(0,s.yg)("p",null,"products \ucf5c\ub809\uc158\uc5d0\uc11c ",(0,s.yg)("inlineCode",{parentName:"p"},"likeUsers"),"\uc758 key\uac12\uc774 \ub85c\uadf8\uc778 \uc720\uc800\uc758 objectId\uc640 \uac19\uace0 value\uac12\uc774 true\uc778 \uc0c1\ud488\ub4e4\uc744 \ud544\ud130\ub9c1\ud558\uc5ec \uc870\ud68c\ud55c\ub2e4."),(0,s.yg)("h3",{id:"\uc7a5\ubc14\uad6c\ub2c8-\uc544\uc774\ud15c-\ucd94\uac00-\uc218\uc815-\uc0ad\uc81c-\uc870\ud68c"},"\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \ucd94\uac00, \uc218\uc815, \uc0ad\uc81c, \uc870\ud68c"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"POST /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \ucd94\uac00)"),(0,s.yg)("li",{parentName:"ul"},"PATCH /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \uc218\uc815)"),(0,s.yg)("li",{parentName:"ul"},"DELETE /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc544\uc774\ud15c \uc0ad\uc81c)"),(0,s.yg)("li",{parentName:"ul"},"GET /carts (\uc7a5\ubc14\uad6c\ub2c8 \uc870\ud68c)")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="arts.schema.ts"',title:'"arts.schema.ts"'},'@Schema(options)\nexport class Cart extends Document {\n  @Prop({\n    type: Types.ObjectId,\n    required: true,\n    ref: "User",\n  })\n  @IsNotEmpty()\n  user: Types.ObjectId;\n\n  @Prop({\n    required: true,\n  })\n  items: [\n    {\n      product: {\n        type: Types.ObjectId;\n        ref: "Product";\n        required: true;\n      };\n      quantity: {\n        type: number;\n        required: true;\n        default: 0;\n      };\n    }\n  ];\n}\n')),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"items"),"\ub77c\ub294 array \ud0c0\uc785 \ud544\ub4dc\uc5d0 ",(0,s.yg)("inlineCode",{parentName:"p"},"product"),"\uc640 \uc218\ub7c9\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ud615\ud0dc\uc774\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="carts.controller.ts"',title:'"carts.controller.ts"'},"@UseGuards(JwtAuthGuard)\n  @Post('')\n  async addCartItem(\n    @Body('productId', ObjectIdValidationPipe) productId: string,\n    @Body('quantity') quantity: number,\n    @LogInUser() user: User,\n  ) {\n    return this.cartsService.addCartItem(productId, quantity, user._id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('')\n  async updateCartItem(\n    @Body('productId', ObjectIdValidationPipe) productId: string,\n    @Body('quantity') quantity: number,\n    @LogInUser() user: User,\n  ) {\n    return this.cartsService.updateCartItem(productId, quantity, user._id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('')\n  async deleteCartItem(\n    @Body('productId', ObjectIdValidationPipe) productId: string,\n    @LogInUser() user: User,\n  ) {\n    return this.cartsService.deleteCartItem(productId, user._id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('')\n  async getCart(@LogInUser() user: User) {\n    return this.cartsService.getCart(user._id);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="carts.service.ts"',title:'"carts.service.ts"'},"async addCartItem(productId: string, quantity: number, userId: string) {\n    const isProductExist = await this.productsRepository.existsById(productId);\n\n    if (!isProductExist) throw new BadRequestException('INVALID_PRODUCT_ID');\n\n    const existCartItem = await this.cartsRepository.existsCartItem(\n      productId,\n      userId,\n    );\n\n    if (existCartItem) {\n      const updateItem = await this.cartsRepository.updateCartItem(\n        productId,\n        quantity,\n        userId,\n      );\n      return updateItem;\n    } else {\n      const addItem = await this.cartsRepository.addCartItem(\n        productId,\n        quantity,\n        userId,\n      );\n      return addItem;\n    }\n  }\n\n  async updateCartItem(productId: string, quantity: number, userId: string) {\n    const isItemExist = await this.cartsRepository.existsCartItem(\n      productId,\n      userId,\n    );\n\n    if (!isItemExist) throw new BadRequestException('DOES_NOT_EXIST_ITEM');\n\n    const updateItem = await this.cartsRepository.updateItemQuantity(\n      productId,\n      quantity,\n      userId,\n    );\n\n    return updateItem;\n  }\n\n  async deleteCartItem(productId: string, userId: string) {\n    const isItemExist = await this.cartsRepository.existsCartItem(\n      productId,\n      userId,\n    );\n\n    if (!isItemExist) throw new BadRequestException('DOES_NOT_EXIST_ITEM');\n\n    const deleteItem = await this.cartsRepository.deleteCartItem(\n      productId,\n      userId,\n    );\n\n    return deleteItem;\n  }\n\n  async getCart(userId: string) {\n    const cart = await this.cartsRepository.findCartByUser(userId);\n    if (!cart) {\n      return cart;\n    }\n    const shipping = this.calculateShipping(cart.totalPrice);\n    cart.shipping = shipping;\n    cart.orderPrice = cart.totalPrice + shipping;\n    return cart;\n  }\n\n  calculateShipping(totalPrice: number) {\n    const FREE_SHIPPING = 30000;\n    const SHIPPING = 3000;\n    const shippingPrice =\n      totalPrice >= FREE_SHIPPING || totalPrice == 0 ? 0 : SHIPPING;\n\n    return shippingPrice;\n  }\n")),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"addCardItem")," \ud568\uc218\uc5d0\uc11c\ub294 \ucd94\uac00\ud558\ub824\ub294 \uc544\uc774\ud15c\uc774 \uc7a5\ubc14\uad6c\ub2c8\uc5d0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc788\uc73c\uba74 \uc218\ub7c9 \ucd94\uac00, \uc5c6\uc73c\uba74 ",(0,s.yg)("inlineCode",{parentName:"p"},"items")," \ud544\ub4dc\uc5d0 \uc0c8\ub85c\uc6b4 item\uc744 push \ud55c\ub2e4."),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"updateCartItem")," \ud568\uc218\uc5d0\uc11c\ub294 \uc218\uc815\ud558\ub824\ub294 \uc544\uc774\ud15c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778 \ud6c4\uc5d0 \uc218\ub7c9 \uc218\uc815\ud55c\ub2e4."),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"deleteCartItem")," \ud568\uc218\uc5d0\uc11c\ub294 \uc0ad\uc81c\ud558\ub824\ub294 \uc544\uc774\ud15c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778 \ud6c4\uc5d0 ",(0,s.yg)("inlineCode",{parentName:"p"},"items")," \ud544\ub4dc\uc5d0\uc11c \ud574\ub2f9 item\uc744 \uc81c\uac70\ud55c\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="carts.repository.ts"',title:'"carts.repository.ts"'},"async existsCartItem(productId: string, userId: string): Promise<boolean> {\n    const result = await this.cartModel.exists({\n      user: userId,\n      items: {\n        $elemMatch: {\n          product: new Types.ObjectId(productId),\n        },\n      },\n    });\n    return result;\n  }\n\n  async addCartItem(\n    productId: string,\n    quantity: number,\n    userId: string,\n  ): Promise<Cart> {\n    const addItem = await this.cartModel.findOneAndUpdate(\n      { user: userId },\n      {\n        $push: {\n          items: {\n            product: new Types.ObjectId(productId),\n            quantity: quantity,\n          },\n        },\n      },\n      { new: true, upsert: true },\n    );\n\n    return addItem;\n  }\n\n  async updateCartItem(\n    productId: string,\n    quantity: number,\n    userId: string,\n  ): Promise<Cart> {\n    const updateItem = await this.cartModel.findOneAndUpdate(\n      {\n        user: userId,\n        items: { $elemMatch: { product: new Types.ObjectId(productId) } },\n      },\n      {\n        $inc: {\n          'items.$.quantity': quantity,\n        },\n      },\n      {\n        new: true,\n      },\n    );\n\n    return updateItem;\n  }\n\n  async updateItemQuantity(\n    productId: string,\n    quantity: number,\n    userId: string,\n  ): Promise<Cart> {\n    const updateItem = await this.cartModel.findOneAndUpdate(\n      {\n        user: userId,\n        items: { $elemMatch: { product: new Types.ObjectId(productId) } },\n      },\n      {\n        $set: {\n          'items.$.quantity': quantity,\n        },\n      },\n      {\n        new: true,\n      },\n    );\n\n    return updateItem;\n  }\n\n  async deleteCartItem(productId: string, userId: string): Promise<Cart> {\n    const deleteItem = await this.cartModel.findOneAndUpdate(\n      {\n        user: userId,\n        items: { $elemMatch: { product: new Types.ObjectId(productId) } },\n      },\n      {\n        $pull: {\n          items: {\n            product: new Types.ObjectId(productId),\n          },\n        },\n      },\n      {\n        new: true,\n      },\n    );\n\n    return deleteItem;\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="populate \uc774\uc6a9\ud55c join"',title:'"populate',"\uc774\uc6a9\ud55c":!0,'join"':!0},"async findCartByUser(userId: string) {\n    const cart = await this.cartModel\n      .findOne({\n        user: userId,\n      })\n      .populate({\n        path: 'items.product',\n        model: 'Product',\n        select: ['-category', '-likeCount'],\n      })\n      .select('items');\n    return cart;\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="query \uacb0\uacfc"',title:'"query','\uacb0\uacfc"':!0},'Mongoose: carts.findOne({ user: new ObjectId("61ef4ef483aeaabd737f4059") }, { projection: { items: 1 } })\nMongoose: products.find({ _id: { \'$in\': [ new ObjectId("61e7cb111c3b362cd6b15440"), new ObjectId("61e7b58e1c3b362cd6b15413") ], [Symbol(mongoose#trustedSymbol)]: true }}, { skip: undefined, limit: undefined, perDocumentLimit: undefined, projection: { category: 0, likeCount: 0 }})\n')),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="lookup\uc744 \uc774\uc6a9\ud55c join"',title:'"lookup\uc744',"\uc774\uc6a9\ud55c":!0,'join"':!0},"async findCartByUser(userId: string): Promise<aggregateCartDto> {\n    const cart = await this.cartModel.aggregate([\n      {\n        $match: { user: userId },\n      },\n      {\n        $unwind: { path: '$items' },\n      },\n      {\n        $lookup: {\n          from: 'products',\n          localField: 'items.product',\n          foreignField: '_id',\n          as: 'items.product',\n        },\n      },\n      {\n        $unwind: { path: '$items.product' },\n      },\n      {\n        $group: {\n          _id: '$_id',\n          items: {\n            $push: '$items',\n          },\n        },\n      },\n      {\n        $project: {\n          'items.product.category': 0,\n          'items.product.likeUsers': 0,\n        },\n      },\n      {\n        $addFields: {\n          items: {\n            $map: {\n              input: '$items',\n              as: 'item',\n              in: {\n                product: '$$item.product',\n                quantity: '$$item.quantity',\n                itemPrice: {\n                  $multiply: ['$$item.product.price', '$$item.quantity'],\n                },\n              },\n            },\n          },\n        },\n      },\n      {\n        $addFields: {\n          totalQuantity: { $sum: '$items.quantity' },\n          totalPrice: { $sum: '$items.itemPrice' },\n        },\n      },\n    ]);\n    return cart[0];\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="query \uacb0\uacfc"',title:'"query','\uacb0\uacfc"':!0},'Mongoose: carts.aggregate(\n  [\n    { $match: { user: new ObjectId("61ef4ef483aeaabd737f4059") } },\n    { $unwind: { path: "$items" } },\n    {\n      $lookup: {\n        from: "products",\n        localField: "items.product",\n        foreignField: "_id",\n        as: "items.product",\n      },\n    },\n    { $unwind: { path: "$items.product" } },\n    { $group: { _id: "$_id", items: { $push: "$items" } } },\n    { $project: { "items.product.category": 0, "items.product.likeUsers": 0 } },\n    {\n      $addFields: {\n        items: {\n          $map: {\n            input: "$items",\n            as: "item",\n            in: {\n              product: "$$item.product",\n              quantity: "$$item.quantity",\n              itemPrice: {\n                $multiply: ["$$item.product.price", "$$item.quantity"],\n              },\n            },\n          },\n        },\n      },\n    },\n    {\n      $addFields: {\n        totalQuantity: { $sum: "$items.quantity" },\n        totalPrice: { $sum: "$items.itemPrice" },\n      },\n    },\n  ],\n  {}\n);\n')),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},'MongoDB\uc758 "$lookup" \uae30\ub2a5\uacfc RDBMS join\uc758 \ucc28\uc774')),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"INNER JOIN\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba70, OUTER JOIN\ub9cc \uc9c0\uc6d0\ud55c\ub2e4."),(0,s.yg)("li",{parentName:"ul"},"\uc870\uc778\ub418\ub294 \ub300\uc0c1 \uceec\ub809\uc158\uc740 \uac19\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc788\uc5b4\uc57c \ud55c\ub2e4."),(0,s.yg)("li",{parentName:"ul"},'\uc0e4\ub529\ub418\uc9c0 \uc54a\uc740 \uceec\ub809\uc158\ub9cc "$lookup" \uc624\ud37c\ub808\uc774\uc158\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.')),(0,s.yg)("h3",{id:"\ub9ac\ubdf0-\uc0dd\uc131-\uc218\uc815-\uc0ad\uc81c-\uc870\ud68c"},"\ub9ac\ubdf0 \uc0dd\uc131, \uc218\uc815, \uc0ad\uc81c, \uc870\ud68c"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"POST /products/reviews/:productId (\ub9ac\ubdf0 \uc0dd\uc131)"),(0,s.yg)("li",{parentName:"ul"},"GET /products/reviews/:productId (\ub9ac\ubdf0 \uc870\ud68c)"),(0,s.yg)("li",{parentName:"ul"},"PUT /products/reviews/:reviewId (\ub9ac\ubdf0 \uc218\uc815)"),(0,s.yg)("li",{parentName:"ul"},"DELETE /products/reviews/:reviewId (\ub9ac\ubdf0 \uc0ad\uc81c)")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="reviews.schema.ts"',title:'"reviews.schema.ts"'},'@Schema(options)\nexport class Review extends Document {\n  @Prop({\n    type: Types.ObjectId,\n    required: true,\n    ref: "User",\n  })\n  @IsNotEmpty()\n  author: Types.ObjectId;\n\n  @Prop({\n    type: Types.ObjectId,\n    required: true,\n    ref: "Product",\n  })\n  @IsNotEmpty()\n  product: Types.ObjectId;\n\n  @Prop()\n  @IsString()\n  content: string;\n\n  @Prop()\n  @IsString()\n  image: string;\n\n  @Prop({\n    default: 0,\n    required: true,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(0)\n  @Max(5)\n  rating: number;\n\n  @Prop({\n    default: false,\n  })\n  @IsBoolean()\n  isDeleted: boolean;\n}\n')),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.schema.ts"',title:'"products.schema.ts"'},"@Prop()\n  recentReviews: Review[];\n")),(0,s.yg)("p",null,"Subset \ud328\ud134\uc744 \ub3c4\uc785\ud558\uc5ec \uc0c1\ud488 \ub3c4\ud050\uba3c\ud2b8\uc5d0 5\uac1c\uc758 \ucd5c\uc2e0 \ub9ac\ubdf0\ub4e4\uc744 \ub530\ub85c \uc800\uc7a5\ud558\uc600\ub2e4."),(0,s.yg)("p",null,(0,s.yg)("img",{parentName:"p",src:"https://i.ibb.co/hmp1KwY/2022-01-28-5-15-08.png",alt:"img"})),(0,s.yg)("p",null,"\uc0c1\ud488 \ub3c4\ud050\uba3c\ud2b8\uc5d0 \uc815\ud574\uc9c4 \uac2f\uc218\ub9cc\ud07c\uc758 \ucd5c\uc2e0 \ub9ac\ubdf0\ub4e4\uc744 \uc800\uc7a5\ud574\ub193\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uba74 \uc870\ud68c\uc2dc\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4."),(0,s.yg)("p",null,"\ud558\uc9c0\ub9cc \ub370\uc774\ud130 \uc218\uc815\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc591\ucabd \ubaa8\ub450\ub97c \uc218\uc815\ud574\uc8fc\uc5b4\uc57c\ud558\uace0, \uc0c8\ub85c\uc6b4 \ub9ac\ubdf0\uac00 \uc0dd\uc131\ub420 \ub54c\ub9c8\ub2e4 \uc0c1\ud488\uc758 \ucd5c\uc2e0\ub9ac\ubdf0 \ud544\ub4dc\ub97c \uc815\ud574\uc9c4 \uac2f\uc218\uc5d0 \ub9de\uac8c \uac31\uc2e0\ud574\uc8fc\ub294 \uc791\uc5c5\uc744 \ud574\uc8fc\uc5b4\uc57c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0dd\uc131\uacfc \uc218\uc815\uc774 \ub354 \ube48\ubc88\ud55c \ub370\uc774\ud130\ub77c\uace0 \ud55c\ub2e4\uba74 \uc624\ud788\ub824 \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="reviews.controller.ts"',title:'"reviews.controller.ts"'},"@UseGuards(JwtAuthGuard)\n  @Post(':productId')\n  async createReivew(\n    @Param('productId', ObjectIdValidationPipe) productId: string,\n    @Body() body: ReviewRequestDto,\n    @Body('rating', ParseIntPipe, RatingValidationPipe) rating: number,\n    @LogInUser() user: User,\n  ) {\n    const reviewDto = {\n      product: productId,\n      author: user._id,\n      ...body,\n    };\n    return await this.reviewsService.createReview(reviewDto);\n  }\n\n  @Get(':productId')\n  async getReivewByProduct(\n    @Param('productId', ObjectIdValidationPipe) productId: string,\n    @Query(QueryValidationPipe) query: ReviewQueryDto,\n  ) {\n    return await this.reviewsService.getReviewByProduct(productId, query);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put(':reviewId')\n  async updateReview(\n    @Param('reviewId', ObjectIdValidationPipe) reviewId: string,\n    @Body() body: ReviewRequestDto,\n    @Body('rating', ParseIntPipe, RatingValidationPipe) rating: number,\n    @LogInUser() user: User,\n  ) {\n    return await this.reviewsService.updateReview(reviewId, user._id, body);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':reviewId')\n  async deleteReview(\n    @Param('reviewId', ObjectIdValidationPipe) reviewId: string,\n    @LogInUser() user: User,\n  ) {\n    return await this.reviewsService.deleteReview(reviewId, user._id);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="reviews.service.ts"',title:'"reviews.service.ts"'},"    async createReview(reviewDto: ReviewDto) {\n    const { product } = reviewDto;\n\n    const isProductExist = await this.productsRepository.existsById(product);\n\n    if (!isProductExist)\n      throw new BadRequestException('PRODUCT_DOES_NOT_EXIST');\n\n    const review = await this.reviewsRepository.createReview(reviewDto);\n\n    await this.reviewsRepository.addRecentReview(review);\n\n    const recentReviewCount = await this.reviewsRepository.countRecentReview(\n      product,\n    );\n\n    if (recentReviewCount > 5) {\n      await this.reviewsRepository.removeRecentReview(product);\n    }\n    return review;\n  }\n\n  async updateReview(reviewId: string, userId: string, body: ReviewRequestDto) {\n    const isReviewExist = await this.reviewsRepository.existsReview(\n      reviewId,\n      userId,\n    );\n\n    if (!isReviewExist) throw new BadRequestException('REVIEW_DOES_NOT_EXIST');\n\n    const updateReview = await this.reviewsRepository.updateReview(\n      reviewId,\n      body,\n    );\n\n    await this.reviewsRepository.updateRecentReview(updateReview);\n\n    return updateReview;\n  }\n\n  async deleteReview(reviewId: string, userId: string) {\n    const isReviewExist = await this.reviewsRepository.existsReview(\n      reviewId,\n      userId,\n    );\n\n    if (!isReviewExist) throw new BadRequestException('REVIEW_DOES_NOT_EXIST');\n\n    await this.reviewsRepository.deleteRecentReview(reviewId);\n    const deleteReview = await this.reviewsRepository.deleteReview(reviewId);\n\n    return deleteReview;\n  }\n\n  async getReviewByProduct(productId: string, query: ReviewQueryDto) {\n    const isProductExist = await this.productsRepository.existsById(productId);\n\n    if (!isProductExist)\n      throw new BadRequestException('PRODUCT_DOES_NOT_EXIST');\n\n    return await this.reviewsRepository.findReviewByProduct(productId, query);\n  }\n\n  async getReviewByAuthor(\n    userId: string | Types.ObjectId,\n    query: ReviewQueryDto,\n  ) {\n    return await this.reviewsRepository.findReviewByAuthor(userId, query);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="reviews.repository.ts"',title:'"reviews.repository.ts"'},"    async createReview(reviewDto: ReviewDto): Promise<Review> {\n    return await this.reviewModel.create(reviewDto);\n  }\n\n  async updateReview(\n    reviewId: string,\n    body: ReviewRequestDto,\n  ): Promise<Review> {\n    const { content, image, rating } = body;\n    return await this.reviewModel.findOneAndUpdate(\n      {\n        _id: reviewId,\n      },\n      {\n        $set: { content, image, rating },\n      },\n      {\n        new: true,\n      },\n    );\n  }\n\n    // \uc0ad\uc81c\uc2dc\uc5d0 isDeleted \ud544\ub4dc\ub97c true \uac12\uc73c\ub85c \uc218\uc815\ud558\uc5ec softDelete\n  async deleteReview(reviewId: string): Promise<Review> {\n    return await this.reviewModel.findOneAndUpdate(\n      {\n        _id: reviewId,\n      },\n      {\n        $set: { isDeleted: true },\n      },\n      {\n        new: true,\n      },\n    );\n  }\n\n  async existsReview(reviewId: string, userId: string): Promise<boolean> {\n    return await this.reviewModel.exists({\n      _id: reviewId,\n      author: userId,\n    });\n  }\n\n  // \uc0c1\ud488\uc758 \ucd5c\uc2e0\ub9ac\ubdf0 \ud544\ub4dc\uc5d0 \uc0dd\uc131\ub41c \ub9ac\ubdf0 push\n  async addRecentReview(review: Review) {\n    return await this.productModel.updateOne(\n      {\n        _id: review.product,\n      },\n      { $push: { recentReviews: review } },\n    );\n  }\n\n  // \ucd5c\uc2e0\ub9ac\ubdf0 \ud544\ub4dc\uc5d0 \ub9ac\ubdf0 \uc218\uac00 5\uac1c\uac00 \ub118\uc5b4\uac14\uc744 \ub54c \uac00\uc7a5 \uc624\ub798\ub41c \ub9ac\ubdf0\ub97c array\uc5d0\uc11c \uc0ad\uc81c\n  async removeRecentReview(productId: string) {\n    return await this.productModel.updateOne(\n      {\n        _id: productId,\n      },\n      {\n        $pop: { recentReviews: -1 },\n      },\n    );\n  }\n\n  // \uc218\uc815 \ub9ac\ubdf0\uac00 \ucd5c\uc2e0 \ub9ac\ubdf0 \ud544\ub4dc\uc5d0 \uc874\uc7ac\ud55c\ub2e4\uba74 \ud568\uaed8 \uc218\uc815\n  async updateRecentReview(review: Review): Promise<Product> {\n    return await this.productModel.findOneAndUpdate(\n      {\n        recentReviews: {\n          $elemMatch: {\n            _id: new Types.ObjectId(review._id),\n            author: review.author,\n          },\n        },\n      },\n      {\n        $set: { 'recentReviews.$[review]': review },\n      },\n      {\n        arrayFilters: [{ 'review._id': new Types.ObjectId(review._id) }],\n        new: true,\n      },\n    );\n  }\n\n  // \uc0ad\uc81c \ub9ac\ubdf0\uac00 \ucd5c\uc2e0 \ub9ac\ubdf0 \ud544\ub4dc\uc5d0 \uc874\uc7ac\ud55c\ub2e4\uba74 array\uc5d0\uc11c \uc0ad\uc81c\n  async deleteRecentReview(reviewId: string) {\n    return await this.productModel.updateOne(\n      {\n        recentReviews: {\n          $elemMatch: {\n            _id: new Types.ObjectId(reviewId),\n          },\n        },\n      },\n      {\n        $pull: { recentReviews: { _id: new Types.ObjectId(reviewId) } },\n      },\n    );\n  }\n\n  // \ucd5c\uc2e0 \ub9ac\ubdf0 array\uc5d0 \ub2f4\uae34 \ub9ac\ubdf0 \uc218\ub97c count\n  async countRecentReview(productId: string): Promise<number> {\n    const countAggregation = await this.productModel.aggregate([\n      {\n        $match: { _id: new Types.ObjectId(productId) },\n      },\n      {\n        $project: {\n          _id: 0,\n          reviewCount: {\n            $cond: {\n              if: { $isArray: '$recentReviews' },\n              then: { $size: '$recentReviews' },\n              else: 0,\n            },\n          },\n        },\n      },\n    ]);\n    return countAggregation[0].reviewCount;\n  }\n\n  async countReview(productId: string): Promise<number> {\n    return await this.reviewModel.countDocuments({\n      product: productId,\n            isDeleted: false,\n    });\n  }\n\n  async calculateRatingAvg(productId: string): Promise<number> {\n    const avgAggregation = await this.reviewModel.aggregate([\n      {\n        $match: { product: productId, isDeleted: false },\n      },\n      {\n        $group: {\n          _id: productId,\n          ratingAvg: { $avg: { $sum: '$rating' } },\n        },\n      },\n    ]);\n\n    if (avgAggregation.length === 0) {\n      return 0;\n    }\n\n    return avgAggregation[0].ratingAvg.toFixed(1);\n  }\n\n  async findReviewByProduct(productId: string, query: ReviewQueryDto) {\n    const { sort, offset = 0, limit = 10, rating } = query;\n\n    const sortBy = {\n      recent: '-createdAt',\n      old: 'createdAt',\n      rating: '-rating',\n    };\n\n    const filterQuery = { product: productId, isDeleted: false };\n\n    if (rating) {\n      filterQuery['rating'] = rating;\n    }\n\n    return await this.reviewModel\n      .find(filterQuery)\n      .skip(offset)\n      .limit(limit)\n      .sort(sortBy[sort]);\n  }\n\n  async findReviewByAuthor(\n    userId: string | Types.ObjectId,\n    query: ReviewQueryDto,\n  ) {\n    const { sort, offset = 0, limit = 10, rating } = query;\n\n    const sortBy = {\n      recent: '-createdAt',\n      old: 'createdAt',\n      rating: '-rating',\n    };\n\n    const filterQuery = { author: userId, isDeleted: false };\n\n    if (rating) {\n      filterQuery['rating'] = rating;\n    }\n\n    return await this.reviewModel\n      .find(filterQuery)\n      .skip(offset)\n      .limit(limit)\n      .sort(sortBy[sort]);\n  }\n")),(0,s.yg)("h3",{id:"post-imageupload-\uc774\ubbf8\uc9c0-\ud30c\uc77c-\uc5c5\ub85c\ub4dc"},"POST /image/upload (\uc774\ubbf8\uc9c0 \ud30c\uc77c \uc5c5\ub85c\ub4dc)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="image.controller.ts"',title:'"image.controller.ts"'},"@UseGuards(JwtAuthGuard)\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('image'))\n  async uploadImage(\n    @LogInUser() user: User,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return await this.imageService.uploadImageToS3(user._id, image);\n  }\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="image.service.ts"',title:'"image.service.ts"'},"constructor() {\n    this.awsS3 = new AWS.S3({\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n      region: process.env.AWS_REGION,\n    });\n    this.S3_BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME;\n  }\n\n  async uploadImageToS3(folder: string, image: Express.Multer.File) {\n    try {\n      const key = `images/${folder}/${Date.now()}_${path.basename(\n        image.originalname,\n      )}`.replace(/ /g, '');\n\n      await this.awsS3\n        .putObject({\n          Bucket: this.S3_BUCKET_NAME,\n          Key: key,\n          Body: image.buffer,\n          ContentType: image.mimetype,\n        })\n        .promise();\n\n      return `https://${this.S3_BUCKET_NAME}.s3.amazonaws.com/${key}`;\n    } catch (error) {\n      console.log(error);\n      throw new BadRequestException('IMAGE_UPLOAD_FAILED');\n    }\n  }\n")))}l.isMDXComponent=!0}}]);