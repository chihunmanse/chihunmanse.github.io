"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2838],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},o=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},f="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),f=s(t),d=r,m=f["".concat(u,".").concat(d)]||f[d]||h[d]||i;return t?a.createElement(m,p(p({ref:n},o),{},{components:t})):a.createElement(m,p({ref:n},o))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,p=new Array(i);p[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[f]="string"==typeof e?e:r,p[1]=l;for(var s=2;s<i;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={title:"Priority Queue & Heap",tags:["DataStructure","Algorithm","Queue","PriorityQueue","Heap","Dijkstra"],sidebar_position:7},p="\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue) & \ud799 (Heap)",l={unversionedId:"datastructure-algorithm/priority-queue&heap",id:"datastructure-algorithm/priority-queue&heap",title:"Priority Queue & Heap",description:"\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue)",source:"@site/docs/datastructure-algorithm/priority-queue&heap.md",sourceDirName:"datastructure-algorithm",slug:"/datastructure-algorithm/priority-queue&heap",permalink:"/datastructure-algorithm/priority-queue&heap",draft:!1,tags:[{label:"DataStructure",permalink:"/tags/data-structure"},{label:"Algorithm",permalink:"/tags/algorithm"},{label:"Queue",permalink:"/tags/queue"},{label:"PriorityQueue",permalink:"/tags/priority-queue"},{label:"Heap",permalink:"/tags/heap"},{label:"Dijkstra",permalink:"/tags/dijkstra"}],version:"current",sidebarPosition:7,frontMatter:{title:"Priority Queue & Heap",tags:["DataStructure","Algorithm","Queue","PriorityQueue","Heap","Dijkstra"],sidebar_position:7},sidebar:"docs",previous:{title:"Dynamic Programming",permalink:"/datastructure-algorithm/dynamic-programming"},next:{title:"BackEnd",permalink:"/backend"}},u={},s=[{value:"\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue)",id:"\uc6b0\uc120\uc21c\uc704-\ud050-priority-queue",level:2},{value:"\uad6c\ud604",id:"\uad6c\ud604",level:3},{value:"1. List\ub97c \ud1b5\ud55c \uad6c\ud604",id:"1-list\ub97c-\ud1b5\ud55c-\uad6c\ud604",level:4},{value:"2. \uc644\uc804 \uc774\uc9c4\ud2b8\ub9ac\ub97c \ud1b5\ud55c \uad6c\ud604 (Heap)",id:"2-\uc644\uc804-\uc774\uc9c4\ud2b8\ub9ac\ub97c-\ud1b5\ud55c-\uad6c\ud604-heap",level:4},{value:"\ud799 (Heap)",id:"\ud799-heap",level:2},{value:"\ud2b9\uc9d5",id:"\ud2b9\uc9d5",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604-1",level:3},{value:"\ub2e4\uc775\uc2a4\ud2b8\ub77c (Dijkstra) \uc54c\uace0\ub9ac\uc998",id:"\ub2e4\uc775\uc2a4\ud2b8\ub77c-dijkstra-\uc54c\uace0\ub9ac\uc998",level:2},{value:"\uc815\uc758",id:"\uc815\uc758",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604-2",level:3}],o={toc:s},f="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\uc6b0\uc120\uc21c\uc704-\ud050-priority-queue--\ud799-heap"},"\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue) & \ud799 (Heap)"),(0,r.kt)("h2",{id:"\uc6b0\uc120\uc21c\uc704-\ud050-priority-queue"},"\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue)"),(0,r.kt)("p",null,"\uc6b0\uc120\uc21c\uc704 \ud050\ub294 \uac01 \uc694\uc18c\uc5d0 \uc6b0\uc120\uc21c\uc704\ub97c \ubd80\uc5ec\ud558\uc5ec, \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc740 \uc694\uc18c\ub97c \uba3c\uc800 \ucc98\ub9ac\ud558\ub294 \uc790\ub8cc \uad6c\uc870\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \ud050\uac00 FIFO(First In, First Out) \uc6d0\uce59\uc744 \ub530\ub974\ub294 \ubc18\uba74, \uc6b0\uc120\uc21c\uc704 \ud050\ub294 \uc6b0\uc120\uc21c\uc704\uc5d0 \ub530\ub77c \uc694\uc18c\uc758 \ucc98\ub9ac \uc21c\uc11c\uac00 \uacb0\uc815\ub41c\ub2e4. \uc6b0\uc120\uc21c\uc704\uac00 \ub3d9\uc77c\ud55c \uc694\uc18c\ub294 FIFO \uaddc\uce59\uc744 \ub530\ub978\ub2e4."),(0,r.kt)("h3",{id:"\uad6c\ud604"},"\uad6c\ud604"),(0,r.kt)("h4",{id:"1-list\ub97c-\ud1b5\ud55c-\uad6c\ud604"},"1. List\ub97c \ud1b5\ud55c \uad6c\ud604"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ubc30\uc5f4\uc758 \ub05d\uc5d0 \uc694\uc18c\ub97c \ucd94\uac00\ud558\uace0, \uc81c\uac70\ud560 \ub54c \uc6b0\uc120\uc21c\uc704\uac00 \uac00\uc7a5 \ub192\uc740 \uc694\uc18c\ub97c \ucc3e\uc544 \uc81c\uac70\ud558\ub294 \ubc29\uc2dd. Enqueue O(1), Dequeue O(n)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class PriorityQueueArray:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, item):\n        self.queue.append(item)\n\n    def dequeue(self):\n        # \uc6b0\uc120\uc21c\uc704\uac00 \uac00\uc7a5 \ub192\uc740 \uc694\uc18c \ucc3e\uae30 (\uc22b\uc790\uac00 \uc791\uc744 \uc218\ub85d \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc74c)\n        index = 0\n        for i in range(1, len(self.queue)):\n            if self.queue[i] < self.queue[index]:\n                index = i\n        return self.queue.pop(index)\n\npq = PriorityQueueArray()\npq.enqueue(3)\npq.enqueue(1)\npq.enqueue(2)\nprint(pq.dequeue())  # 1\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ubc30\uc5f4\uc5d0 \uc694\uc18c\ub97c \ucd94\uac00\ud560 \ub54c \uc6b0\uc120\uc21c\uc704\uc5d0 \ub530\ub77c \uc815\ub82c\ud558\ub294 \ubc29\uc2dd, Enqueue O(n log n), Dequeue O(1)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class PriorityQueueArraySorted:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, item):\n        self.queue.append(item)\n        self.queue.sort()  # \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c (\uc22b\uc790\uac00 \uc791\uc744 \uc218\ub85d \uc6b0\uc120\uc21c\uc704\uac00 \ub192\uc74c)\n\n    def dequeue(self):\n        return self.queue.pop(0)  # \uac00\uc7a5 \uc55e\uc758 \uc694\uc18c \uc81c\uac70\n\npq = PriorityQueueArraySorted()\npq.enqueue(3)\npq.enqueue(1)\npq.enqueue(2)\nprint(pq.dequeue()) # 1\n")))),(0,r.kt)("h4",{id:"2-\uc644\uc804-\uc774\uc9c4\ud2b8\ub9ac\ub97c-\ud1b5\ud55c-\uad6c\ud604-heap"},"2. \uc644\uc804 \uc774\uc9c4\ud2b8\ub9ac\ub97c \ud1b5\ud55c \uad6c\ud604 (Heap)"),(0,r.kt)("p",null,"\uc6b0\uc120\uc21c\uc704 \ud050\ub294 \uc644\uc804 \uc774\uc9c4\ud2b8\ub9ac \uad6c\uc870\uc778 \ud799(Heap)\uc744 \uc0ac\uc6a9\ud558\uc5ec Enqueue\uc640 Dequeue \ubaa8\ub450 O(log n)\uc758 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\nclass PriorityQueueHeap:\n    def __init__(self):\n        self.heap = []\n\n    def enqueue(self, item):\n        heapq.heappush(self.heap, item)  # \uc694\uc18c \ucd94\uac00\n\n    def dequeue(self):\n        return heapq.heappop(self.heap)  # \uac00\uc7a5 \uc791\uc740 \uc694\uc18c \uc81c\uac70\n\n\npq = PriorityQueueHeap()\npq.enqueue(3)\npq.enqueue(1)\npq.enqueue(2)\nprint(pq.dequeue())  # 1\n")),(0,r.kt)("p",null,"Enqueue: \ud799 \uad6c\uc870\uc5d0 \uc694\uc18c\ub97c \ucd94\uac00\ud558\uace0, \ud799 \uc131\uc9c8\uc744 \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uc815\ub82c\ud558\ub294 \ub370 O(log n)\uc758 \uc2dc\uac04\uc774 \uc18c\uc694\ub41c\ub2e4."),(0,r.kt)("p",null,"Dequeue: \ub8e8\ud2b8 \ub178\ub4dc\ub97c \uc81c\uac70\ud558\uace0, \ub098\uba38\uc9c0 \ud2b8\ub9ac\ub97c \uc7ac\uc815\ub82c\ud558\ub294 \ub370 O(log n)\uc758 \uc2dc\uac04\uc774 \uac78\ub9b0\ub2e4."),(0,r.kt)("h2",{id:"\ud799-heap"},"\ud799 (Heap)"),(0,r.kt)("h3",{id:"\ud2b9\uc9d5"},"\ud2b9\uc9d5"),(0,r.kt)("p",null,"\ud799\uc740 \uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac \ud615\ud0dc\ub97c \uac00\uc9c4 \uc790\ub8cc \uad6c\uc870\ub85c, \uac01 \ub178\ub4dc\uc758 \ubd80\ubaa8 \ub178\ub4dc\uac00 \uc790\uc2dd \ub178\ub4dc\ubcf4\ub2e4 \ud06c\uac70\ub098(\ucd5c\ub300 \ud799) \uc791\uc544\uc57c(\ucd5c\uc18c \ud799) \ud558\ub294 \uc870\uac74\uc744 \uac00\uc9c4\ub2e4. \ud799\uc740 \uc6b0\uc120\uc21c\uc704 \ud050 \uad6c\ud604\uc5d0 \uc790\uc8fc \uc0ac\uc6a9\ub418\uba70, \ube60\ub978 \uc0bd\uc785\uacfc \uc0ad\uc81c \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud558\ub2e4."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\ucd5c\ub300 \ud799(Max-Heap)")," : \ubd80\ubaa8 \ub178\ub4dc\uc758 \uac12\uc774 \uc790\uc2dd \ub178\ub4dc\uc758 \uac12\ubcf4\ub2e4 \ud06c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\ucd5c\uc18c \ud799(Min-Heap)")," : \ubd80\ubaa8 \ub178\ub4dc\uc758 \uac12\uc774 \uc790\uc2dd \ub178\ub4dc\uc758 \uac12\ubcf4\ub2e4 \uc791\ub2e4.")),(0,r.kt)("h3",{id:"\uad6c\ud604-1"},"\uad6c\ud604"),(0,r.kt)("p",null,"\ud799\uc740 \uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac\ub97c \ubc30\uc5f4\ub85c \ud45c\ud604\ud558\uc5ec \uad6c\ud604\ud560 \uc218 \uc788\uc73c\uba70, \uc0bd\uc785\uacfc \uc0ad\uc81c \uc2dc\uc5d0\ub294 \uc0c1\ud5a5\uc2dd \ud639\uc740 \ud558\ud5a5\uc2dd \uc815\ub82c\uc744 \ud1b5\ud574 \ud799 \uad6c\uc870\ub97c \uc720\uc9c0\ud55c\ub2e4."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\uc0bd\uc785")," : \uc0c8\ub85c\uc6b4 \uac12\uc744 \ud799\uc5d0 \uc0bd\uc785\ud560 \ub54c\ub294 \ubc30\uc5f4\uc758 \ub05d\uc5d0 \uac12\uc744 \ucd94\uac00\ud55c \ud6c4, \ubd80\ubaa8 \ub178\ub4dc\uc640 \ube44\uad50\ud558\uba74\uc11c \uc801\uc808\ud55c \uc704\uce58\ub85c \uc62c\ub9b0\ub2e4. \uc774\ub97c Heapify-Up \uc5f0\uc0b0\uc774\ub77c\uace0 \ud558\uba70, \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 \ud2b8\ub9ac\uc758 \ub192\uc774\uc5d0 \ube44\ub840\ud558\uc5ec O(log n)\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\uc0ad\uc81c")," : \ub8e8\ud2b8 \ub178\ub4dc(\ucd5c\uc18c\uac12)\ub97c \uc0ad\uc81c\ud55c \ud6c4, \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c \ub8e8\ud2b8\uc5d0 \ubc30\uce58\ud558\uace0 \uc790\uc2dd\ub4e4\uacfc \ube44\uad50\ud558\uba70 \ub0b4\ub9ac\ub294 \uacfc\uc815(Heapify-Down)\uc744 \ud1b5\ud574 \ud799 \uc18d\uc131\uc744 \uc720\uc9c0\ud55c\ub2e4. \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(log n)\uc774\ub2e4.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def parent(self, i):\n        return (i - 1) // 2\n\n    def left_child(self, i):\n        return 2 * i + 1\n\n    def right_child(self, i):\n        return 2 * i + 2\n\n    def heappush(self, key):\n        """\n        \uc0c8\ub85c\uc6b4 \uac12\uc744 \uc0bd\uc785\ud558\ub294 \uc5f0\uc0b0.\n        \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9\uc5d0 \uc694\uc18c\ub97c \ucd94\uac00\ud558\uace0, \ubd80\ubaa8 \ub178\ub4dc\uc640 \ube44\uad50\ud558\uba70 \uc801\uc808\ud55c \uc704\uce58\ub85c \uc62c\ub9b0\ub2e4 (Heapify-Up).\n        \uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O(log n)\n        """\n        self.heap.append(key)\n        self.heapify_up(len(self.heap) - 1)\n\n    def heapify_up(self, index):\n        """\n        Heapify-Up \uacfc\uc815: \uc790\uc2dd \ub178\ub4dc\uac00 \ubd80\ubaa8 \ub178\ub4dc\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc704\uce58\ub97c \uad50\ud658\ud558\uba70 \uc704\ub85c \uc62c\ub77c\uac04\ub2e4.\n        """\n        while index > 0 and self.heap[self.parent(index)] > self.heap[index]:\n            # \ubd80\ubaa8 \ub178\ub4dc\uc640 \uc790\uc2dd \ub178\ub4dc\ub97c \uad50\ud658\n            self.heap[self.parent(index)], self.heap[index] = self.heap[index], self.heap[self.parent(index)]\n            # \uc778\ub371\uc2a4\ub97c \ubd80\ubaa8 \ub178\ub4dc\ub85c \uc5c5\ub370\uc774\ud2b8\n            index = self.parent(index)\n\n    def heappop(self):\n        """\n        \ub8e8\ud2b8 \ub178\ub4dc(\ucd5c\uc18c\uac12)\ub97c \uc0ad\uc81c\ud558\ub294 \uc5f0\uc0b0.\n        \ub8e8\ud2b8\uc640 \ub9c8\uc9c0\ub9c9 \uc694\uc18c\ub97c \uad50\ud658\ud55c \ud6c4, \ub8e8\ud2b8\uc5d0\uc11c\ubd80\ud130 \ud799 \uc18d\uc131\uc744 \uc7ac\uc815\ub82c (Heapify-Down).\n        \uc2dc\uac04 \ubcf5\uc7a1\ub3c4: O(log n)\n        """\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n\n        # \ub8e8\ud2b8 \ub178\ub4dc\uc640 \ub9c8\uc9c0\ub9c9 \ub178\ub4dc\ub97c \uad50\ud658\ud55c \ud6c4, \ub9c8\uc9c0\ub9c9 \ub178\ub4dc\ub97c \uc81c\uac70\n        root = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self.heapify_down(0)\n        return root\n\n    def heapify_down(self, index):\n        """\n        Heapify-Down \uacfc\uc815: \ubd80\ubaa8 \ub178\ub4dc\uac00 \uc790\uc2dd \ub178\ub4dc\ubcf4\ub2e4 \ud06c\uba74 \uc704\uce58\ub97c \uad50\ud658\ud558\uba70 \uc544\ub798\ub85c \ub0b4\ub824\uac04\ub2e4.\n        """\n        smallest = index\n        left = self.left_child(index)\n        right = self.right_child(index)\n\n        # \uc67c\ucabd \uc790\uc2dd\uc774 \uc874\uc7ac\ud558\uace0, \ud604\uc7ac \ub178\ub4dc\ubcf4\ub2e4 \uc791\uc73c\uba74 smallest\ub97c \uc67c\ucabd \uc790\uc2dd\uc73c\ub85c \uc124\uc815\n        if left < len(self.heap) and self.heap[left] < self.heap[smallest]:\n            smallest = left\n\n        # \uc624\ub978\ucabd \uc790\uc2dd\uc774 \uc874\uc7ac\ud558\uace0, \ud604\uc7ac smallest\ubcf4\ub2e4 \uc791\uc73c\uba74 smallest\ub97c \uc624\ub978\ucabd \uc790\uc2dd\uc73c\ub85c \uc124\uc815\n        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n            smallest = right\n\n        # \ub9cc\uc57d smallest\uac00 \ud604\uc7ac \ub178\ub4dc\uac00 \uc544\ub2c8\ub77c\uba74 \uad50\ud658 \ud6c4, \uc790\uc2dd \ub178\ub4dc\uc5d0\uc11c \ub2e4\uc2dc heapify-down\n        if smallest != index:\n            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]\n            self.heapify_down(smallest)\n\n    def get_min(self):\n        """\n        \ud604\uc7ac \ud799\uc5d0\uc11c \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud558\ub294 \uc5f0\uc0b0.\n        \ucd5c\uc18c \ud799\uc5d0\uc11c\ub294 \ud56d\uc0c1 \ub8e8\ud2b8 \ub178\ub4dc\uac00 \ucd5c\uc18c\uac12\uc774\ubbc0\ub85c, \ubc30\uc5f4\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub97c \ubc18\ud658\ud55c\ub2e4.\n        """\n        if len(self.heap) == 0:\n            return None\n        return self.heap[0]\n\n    def size(self):\n        """\n        \ud799\uc758 \ud06c\uae30\ub97c \ubc18\ud658\ud558\ub294 \uc5f0\uc0b0.\n        """\n        return len(self.heap)\n\nmin_heap = MinHeap()\nmin_heap.heappush(10)\nmin_heap.heappush(5)\nmin_heap.heappush(15)\nmin_heap.heappush(2)\n\nprint("\ucd5c\uc18c\uac12:", min_heap.get_min())  # \ucd5c\uc18c\uac12 2\nprint("\uc0ad\uc81c\ub41c \ucd5c\uc18c\uac12:", min_heap.heappop())  # \uc0ad\uc81c\ub41c \uac12 2\nprint("\uc0c8\ub85c\uc6b4 \ucd5c\uc18c\uac12:", min_heap.get_min())  # \uc0c8\ub85c\uc6b4 \ucd5c\uc18c\uac12 5\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Python\uc5d0\uc11c\ub294 heapq \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\uba74 \uc27d\uac8c heap \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ucd5c\uc18c \ud799"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, item):\n        heapq.heappush(self.heap, item)\n\n    def delete(self):\n        return heapq.heappop(self.heap)\n\nmin_heap = MinHeap()\nmin_heap.insert(10)\nmin_heap.insert(5)\nmin_heap.insert(15)\nprint(min_heap.delete())  # 5\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ucd5c\ub300 \ud799"),(0,r.kt)("p",{parentName:"li"},"Python\uc5d0\uc11c\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ucd5c\uc18c \ud799\uc744 \uc81c\uacf5\ud558\ubbc0\ub85c, \ucd5c\ub300 \ud799\uc744 \uad6c\ud604\ud558\ub824\uba74 \uac12\uc744 \uc74c\uc218\ub85c \ubc14\uafd4 \uc0bd\uc785\ud558\uace0 \uc0ad\uc81c\ud560 \ub54c \ub2e4\uc2dc \uc591\uc218\ub85c \ubc18\ud658\ud574\uc57c\ud55c\ub2e4."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, item):\n        heapq.heappush(self.heap, -item)  # \uc74c\uc218\ub85c \uc800\uc7a5\n\n    def delete(self):\n        return -heapq.heappop(self.heap)  # \uc74c\uc218\ub85c \uaebc\ub0b4\uc11c \ub2e4\uc2dc \uc591\uc218\ub85c \ubcc0\ud658\n\nmax_heap = MaxHeap()\nmax_heap.insert(10)\nmax_heap.insert(5)\nmax_heap.insert(15)\nprint(max_heap.delete())  # 15\n")))),(0,r.kt)("h2",{id:"\ub2e4\uc775\uc2a4\ud2b8\ub77c-dijkstra-\uc54c\uace0\ub9ac\uc998"},"\ub2e4\uc775\uc2a4\ud2b8\ub77c (Dijkstra) \uc54c\uace0\ub9ac\uc998"),(0,r.kt)("h3",{id:"\uc815\uc758"},"\uc815\uc758"),(0,r.kt)("p",null,"\ub2e4\uc775\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998\uc740 ",(0,r.kt)("strong",{parentName:"p"},"\uac00\uc911\uce58\uac00 \uc788\ub294 \uadf8\ub798\ud504"),"\uc5d0\uc11c \ud55c \uc815\uc810\uc5d0\uc11c \ub2e4\ub978 \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8 \uacbd\ub85c\ub97c \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. BFS\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, \uac00\uc911\uce58\uc5d0 \uae30\ubc18\ud558\uc5ec \uacbd\ub85c\ub97c \uc120\ud0dd\ud55c\ub2e4."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\uc2dc\uc791 \uc815\uc810\uc744 \uc124\uc815\ud558\uace0, \ud574\ub2f9 \uc815\uc810\uc5d0\uc11c \ub2e4\ub978 \uc815\uc810\uc73c\ub85c \uac00\ub294 \uacbd\ub85c\uc758 \uac00\uc911\uce58\ub97c \uacc4\uc0b0\ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\uac00\uc7a5 \uc9e7\uc740 \uacbd\ub85c\ub97c \uc120\ud0dd\ud55c \ud6c4, \uadf8 \uacbd\ub85c\ub97c \ud1b5\ud574 \uac08 \uc218 \uc788\ub294 \ub2e4\ub978 \uc815\uc810\ub4e4\uc758 \uac00\uc911\uce58\ub97c \uac31\uc2e0\ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\uc774 \uacfc\uc815\uc744 \ubaa8\ub4e0 \uc815\uc810\uc5d0 \ub300\ud574 \ubc18\ubcf5\ud558\uc5ec, \ucd5c\uc885\uc801\uc73c\ub85c \uc2dc\uc791 \uc815\uc810\uc5d0\uc11c \ubaa8\ub4e0 \uc815\uc810\uae4c\uc9c0\uc758 \ucd5c\ub2e8 \uacbd\ub85c\ub97c \uacc4\uc0b0\ud55c\ub2e4.")),(0,r.kt)("h3",{id:"\uad6c\ud604-2"},"\uad6c\ud604"),(0,r.kt)("p",null,"\ub2e4\uc775\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998\uc740 ",(0,r.kt)("strong",{parentName:"p"},"\uc6b0\uc120\uc21c\uc704 \ud050"),"(Priority Queue)\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ud604\ud560 \uc218 \uc788\uc73c\uba70, \ubcf4\ud1b5 ",(0,r.kt)("strong",{parentName:"p"},"\ud799"),"\uc744 \uc774\uc6a9\ud574 \uc6b0\uc120\uc21c\uc704 \ud050\ub97c \uad6c\ud604\ud55c\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import heapq\n\ndef dijkstra(graph, start):\n    # \ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \ub300\ud55c \uac70\ub9ac\ub97c \ubb34\ud55c\ub300\ub85c \ucd08\uae30\ud654 (\uc544\uc9c1 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \uc758\ubbf8)\n    distances = {node: float('inf') for node in graph}\n    # \uc2dc\uc791 \ub178\ub4dc\uae4c\uc9c0\uc758 \uac70\ub9ac\ub294 0\uc73c\ub85c \uc124\uc815 (\uc790\uae30 \uc790\uc2e0\uae4c\uc9c0\uc758 \uac70\ub9ac\ub294 0)\n    distances[start] = 0\n    # \uc6b0\uc120\uc21c\uc704 \ud050\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud0d0\uc0c9\ud560 \ub178\ub4dc\uc640 \ud604\uc7ac\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \uc800\uc7a5 (\uac70\ub9ac, \ub178\ub4dc) \ud615\ud0dc\n    queue = [(0, start)]  # (\uac70\ub9ac, \uc815\uc810)\n\n    # \ud050\uac00 \ube4c \ub54c\uae4c\uc9c0 \ubc18\ubcf5 (\ubaa8\ub4e0 \ub178\ub4dc\ub97c \ucc98\ub9ac\ud560 \ub54c\uae4c\uc9c0)\n    while queue:\n        # \ud050\uc5d0\uc11c \ud604\uc7ac \uac00\uc7a5 \uc9e7\uc740 \uac70\ub9ac\uc640 \ud574\ub2f9 \ub178\ub4dc\ub97c \uaebc\ub0c4 (\uc6b0\uc120\uc21c\uc704 \ud050\uc758 \ucd5c\uc19f\uac12)\n        current_distance, current_node = heapq.heappop(queue)\n\n        # \uc774\ubbf8 \uae30\ub85d\ub41c \uac70\ub9ac\ubcf4\ub2e4 \ud604\uc7ac \uaebc\ub0b8 \uac70\ub9ac\uac00 \ud06c\uba74 \ud574\ub2f9 \ub178\ub4dc\ub294 \uc774\ubbf8 \ucc98\ub9ac\ub41c \uac83\uc774\ubbc0\ub85c \uc2a4\ud0b5\n        if current_distance > distances[current_node]:\n            continue\n\n        # \ud604\uc7ac \ub178\ub4dc\uc758 \uc778\uc811\ud55c \uc774\uc6c3\ub4e4\uc744 \ubaa8\ub450 \ud0d0\uc0c9\n        for neighbor, weight in graph[current_node].items():\n            # \ud604\uc7ac \ub178\ub4dc\ub97c \uac70\uccd0 \uc774\uc6c3 \ub178\ub4dc\uae4c\uc9c0 \uac00\ub294 \uac70\ub9ac \uacc4\uc0b0\n            distance = current_distance + weight\n\n            # \uc0c8\ub85c \uacc4\uc0b0\ud55c \uac70\ub9ac\uac00 \uae30\uc874\uc5d0 \uc800\uc7a5\ub41c \uac70\ub9ac\ubcf4\ub2e4 \uc791\ub2e4\uba74 \ucd5c\ub2e8 \uacbd\ub85c\ub85c \uac31\uc2e0\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance  # \ucd5c\ub2e8 \uac70\ub9ac \uac31\uc2e0\n                # \uac31\uc2e0\ub41c \uc774\uc6c3 \ub178\ub4dc\ub97c \uc6b0\uc120\uc21c\uc704 \ud050\uc5d0 \ucd94\uac00\n                heapq.heappush(queue, (distance, neighbor))\n\n    # \uc2dc\uc791 \ub178\ub4dc\ub85c\ubd80\ud130 \uac01 \ub178\ub4dc\uae4c\uc9c0\uc758 \ucd5c\ub2e8 \uac70\ub9ac\uac00 \uc800\uc7a5\ub41c \ub515\uc154\ub108\ub9ac\ub97c \ubc18\ud658\n    return distances\n\n# \uadf8\ub798\ud504 \uc815\uc758 (\uc778\uc811 \ub9ac\uc2a4\ud2b8 \ud615\ud0dc)\ngraph = {\n    'A': {'B': 1, 'C': 4},  # A\uc640 \uc5f0\uacb0\ub41c \ub178\ub4dc B, C\uc640 \uadf8 \uac00\uc911\uce58\n    'B': {'A': 1, 'C': 2, 'D': 5},  # B\uc640 \uc5f0\uacb0\ub41c \ub178\ub4dc A, C, D\uc640 \uadf8 \uac00\uc911\uce58\n    'C': {'A': 4, 'B': 2, 'D': 1},  # C\uc640 \uc5f0\uacb0\ub41c \ub178\ub4dc A, B, D\uc640 \uadf8 \uac00\uc911\uce58\n    'D': {'B': 5, 'C': 1},  # D\uc640 \uc5f0\uacb0\ub41c \ub178\ub4dc B, C\uc640 \uadf8 \uac00\uc911\uce58\n}\n\n# \uc2dc\uc791 \ub178\ub4dc\ub97c 'A'\ub85c \uc124\uc815\ud558\uace0 \ub2e4\uc775\uc2a4\ud2b8\ub77c \uc54c\uace0\ub9ac\uc998 \uc2e4\ud589\nstart_node = 'A'\nprint(dijkstra(graph, start_node))  # {'A': 0, 'B': 1, 'C': 3, 'D': 4}\n")))}h.isMDXComponent=!0}}]);