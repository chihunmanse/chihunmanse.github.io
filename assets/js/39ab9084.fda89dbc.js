"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,g=c["".concat(d,".").concat(h)]||c[h]||o[h]||l;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={title:"Graph",tags:["DataStructure","Algorithm","Graph","BFS","DFS"],sidebar_position:5},i="\uadf8\ub798\ud504 (Graph)",p={unversionedId:"datastructure-algorithm/graph",id:"datastructure-algorithm/graph",title:"Graph",description:"\uadf8\ub798\ud504(G)\ub294 \uc815\uc810(vertex)\ub4e4\uc758 \uc9d1\ud569 V\uc640 \uc774\ub4e4\uc744 \uc5f0\uacb0\ud558\ub294 \uac04\uc120(Edge)\ub4e4\uc758 \uc9d1\ud569 E\ub85c \uad6c\uc131\ub41c \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \uc815\uc810\uc740 \uadf8\ub798\ud504 \ub0b4\uc758 \uac1c\ubcc4\uc801\uc778 \uac1d\uccb4\ub97c \ub098\ud0c0\ub0b4\uba70, \uac04\uc120\uc740 \uc815\uc810 \uac04\uc758 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b8\ub2e4.",source:"@site/docs/datastructure-algorithm/graph.md",sourceDirName:"datastructure-algorithm",slug:"/datastructure-algorithm/graph",permalink:"/datastructure-algorithm/graph",draft:!1,tags:[{label:"DataStructure",permalink:"/tags/data-structure"},{label:"Algorithm",permalink:"/tags/algorithm"},{label:"Graph",permalink:"/tags/graph"},{label:"BFS",permalink:"/tags/bfs"},{label:"DFS",permalink:"/tags/dfs"}],version:"current",sidebarPosition:5,frontMatter:{title:"Graph",tags:["DataStructure","Algorithm","Graph","BFS","DFS"],sidebar_position:5},sidebar:"docs",previous:{title:"Tree",permalink:"/datastructure-algorithm/tree"},next:{title:"BackEnd",permalink:"/backend"}},d={},u=[{value:"\uc885\ub958",id:"\uc885\ub958",level:2},{value:"\ubc29\ud5a5 \uadf8\ub798\ud504 vs \ubb34\ud5a5 \uadf8\ub798\ud504",id:"\ubc29\ud5a5-\uadf8\ub798\ud504-vs-\ubb34\ud5a5-\uadf8\ub798\ud504",level:3},{value:"\ubc29\ud5a5 \uadf8\ub798\ud504 (Directed Graph)",id:"\ubc29\ud5a5-\uadf8\ub798\ud504-directed-graph",level:4},{value:"\ubb34\ud5a5 \uadf8\ub798\ud504 (Undirected Graph)",id:"\ubb34\ud5a5-\uadf8\ub798\ud504-undirected-graph",level:4},{value:"\ub2e4\uc911 \uadf8\ub798\ud504 vs \ub2e8\uc21c \uadf8\ub798\ud504",id:"\ub2e4\uc911-\uadf8\ub798\ud504-vs-\ub2e8\uc21c-\uadf8\ub798\ud504",level:3},{value:"\ub2e4\uc911 \uadf8\ub798\ud504 (Multi Graph)",id:"\ub2e4\uc911-\uadf8\ub798\ud504-multi-graph",level:4},{value:"\ub2e8\uc21c \uadf8\ub798\ud504 (Simple Graph)",id:"\ub2e8\uc21c-\uadf8\ub798\ud504-simple-graph",level:4},{value:"\uac00\uc911\uce58 \uadf8\ub798\ud504",id:"\uac00\uc911\uce58-\uadf8\ub798\ud504",level:3},{value:"\ud45c\ud604 \ubc29\uc2dd",id:"\ud45c\ud604-\ubc29\uc2dd",level:2},{value:"\uc778\uc811 \ub9ac\uc2a4\ud2b8 (Adjacency List)",id:"\uc778\uc811-\ub9ac\uc2a4\ud2b8-adjacency-list",level:3},{value:"\uc778\uc811 \ud589\ub82c (Adjacency Matrix)",id:"\uc778\uc811-\ud589\ub82c-adjacency-matrix",level:3},{value:"\uc554\uc2dc\uc801 \uadf8\ub798\ud504 (Implicit Graph)",id:"\uc554\uc2dc\uc801-\uadf8\ub798\ud504-implicit-graph",level:3},{value:"\uc21c\ud68c \ubc29\uc2dd",id:"\uc21c\ud68c-\ubc29\uc2dd",level:2},{value:"BFS (Breadth-First Search)",id:"bfs-breadth-first-search",level:3},{value:"DFS (Depth-First Search)",id:"dfs-depth-first-search",level:3}],s={toc:u},c="wrapper";function o(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\uadf8\ub798\ud504-graph"},"\uadf8\ub798\ud504 (Graph)"),(0,a.kt)("p",null,"\uadf8\ub798\ud504(G)\ub294 \uc815\uc810(vertex)\ub4e4\uc758 \uc9d1\ud569 V\uc640 \uc774\ub4e4\uc744 \uc5f0\uacb0\ud558\ub294 \uac04\uc120(Edge)\ub4e4\uc758 \uc9d1\ud569 E\ub85c \uad6c\uc131\ub41c \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \uc815\uc810\uc740 \uadf8\ub798\ud504 \ub0b4\uc758 \uac1c\ubcc4\uc801\uc778 \uac1d\uccb4\ub97c \ub098\ud0c0\ub0b4\uba70, \uac04\uc120\uc740 \uc815\uc810 \uac04\uc758 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b8\ub2e4."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"G = (V, E)"),": G\ub294 \uadf8\ub798\ud504, V\ub294 \uc815\uc810\uc758 \uc9d1\ud569, E\ub294 \uac04\uc120\uc758 \uc9d1\ud569")),(0,a.kt)("p",null,"\uadf8\ub798\ud504\ub294 \ub124\ud2b8\uc6cc\ud06c, \uc18c\uc15c \ubbf8\ub514\uc5b4 \uc5f0\uacb0, \uacbd\ub85c \ud0d0\uc0c9, \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654 \ubb38\uc81c \ub4f1 \ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0\uc11c \ud65c\uc6a9\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub3c4\ub85c \ub124\ud2b8\uc6cc\ud06c\ub97c \uadf8\ub798\ud504\ub85c \ud45c\ud604\ud558\uc5ec \ucd5c\ub2e8 \uacbd\ub85c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uac70\ub098, \uc18c\uc15c \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uce5c\uad6c \ucd94\ucc9c \uc2dc\uc2a4\ud15c\uc744 \uad6c\ucd95\ud558\ub294 \ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4."),(0,a.kt)("h2",{id:"\uc885\ub958"},"\uc885\ub958"),(0,a.kt)("h3",{id:"\ubc29\ud5a5-\uadf8\ub798\ud504-vs-\ubb34\ud5a5-\uadf8\ub798\ud504"},"\ubc29\ud5a5 \uadf8\ub798\ud504 vs \ubb34\ud5a5 \uadf8\ub798\ud504"),(0,a.kt)("h4",{id:"\ubc29\ud5a5-\uadf8\ub798\ud504-directed-graph"},"\ubc29\ud5a5 \uadf8\ub798\ud504 (Directed Graph)"),(0,a.kt)("p",null,"\uac01 \uac04\uc120\uc774 \ubc29\ud5a5\uc744 \uac00\uc9c0\uba70, \ud55c \uc815\uc810\uc5d0\uc11c \ub2e4\ub978 \uc815\uc810\uc73c\ub85c\uc758 \uc774\ub3d9\uc774 \ub2e8\ubc29\ud5a5\uc73c\ub85c\ub9cc \uac00\ub2a5\ud55c \uadf8\ub798\ud504\uc774\ub2e4. A\uc5d0\uc11c B\ub85c \uac00\ub294 \uac04\uc120\uc774 \uc788\ub2e4\uba74, B\uc5d0\uc11c A\ub85c \uac00\ub294 \uac04\uc120\uc740 \ubcc4\ub3c4\ub85c \uc874\uc7ac\ud574\uc57c \ud55c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"A \u2192 B\n\u2193   \u2191\nC \u2192 D\n")),(0,a.kt)("h4",{id:"\ubb34\ud5a5-\uadf8\ub798\ud504-undirected-graph"},"\ubb34\ud5a5 \uadf8\ub798\ud504 (Undirected Graph)"),(0,a.kt)("p",null,"\uac04\uc120\uc5d0 \ubc29\ud5a5\uc774 \uc5c6\uc73c\uba70, \ud55c \uc815\uc810\uc5d0\uc11c \ub2e4\ub978 \uc815\uc810\uc73c\ub85c\uc758 \uc774\ub3d9\uc774 \uc591\ubc29\ud5a5\uc73c\ub85c \uac00\ub2a5\ud55c \uadf8\ub798\ud504\uc774\ub2e4. A\uc5d0\uc11c B\ub85c \uac00\ub294 \uac04\uc120\uc774 \uc874\uc7ac\ud558\uba74, B\uc5d0\uc11c A\ub85c\ub3c4 \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"A - B\n|   |\nC - D\n")),(0,a.kt)("h3",{id:"\ub2e4\uc911-\uadf8\ub798\ud504-vs-\ub2e8\uc21c-\uadf8\ub798\ud504"},"\ub2e4\uc911 \uadf8\ub798\ud504 vs \ub2e8\uc21c \uadf8\ub798\ud504"),(0,a.kt)("h4",{id:"\ub2e4\uc911-\uadf8\ub798\ud504-multi-graph"},"\ub2e4\uc911 \uadf8\ub798\ud504 (Multi Graph)"),(0,a.kt)("p",null,"\ub3d9\uc77c\ud55c \uc815\uc810 \uc30d \uc0ac\uc774\uc5d0 \uc5ec\ub7ec \uac1c\uc758 \uac04\uc120\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\ub294 \uadf8\ub798\ud504\uc774\ub2e4. \uc989, A\uc5d0\uc11c B\ub85c \uac00\ub294 \uc5ec\ub7ec \uac1c\uc758 \uacbd\ub85c\uac00 \uc788\uc744 \uc218 \uc788\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"A \u21d2 B\n\u2191 \u2198\nB \u21d2 C\n")),(0,a.kt)("h4",{id:"\ub2e8\uc21c-\uadf8\ub798\ud504-simple-graph"},"\ub2e8\uc21c \uadf8\ub798\ud504 (Simple Graph)"),(0,a.kt)("p",null,"\uc815\uc810 \uc30d \uc0ac\uc774\uc5d0 \ud558\ub098\uc758 \uac04\uc120\ub9cc \uc874\uc7ac\ud558\ub294 \uadf8\ub798\ud504\ub85c, \ub8e8\ud504(\uc790\uae30 \uc790\uc2e0\uc73c\ub85c\uc758 \uac04\uc120)\ub098 \uc911\ubcf5 \uac04\uc120\uc774 \uc5c6\ub294 \uadf8\ub798\ud504\uc774\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  A --- B\n  |     |\n  C --- D\n\n")),(0,a.kt)("h3",{id:"\uac00\uc911\uce58-\uadf8\ub798\ud504"},"\uac00\uc911\uce58 \uadf8\ub798\ud504"),(0,a.kt)("p",null,"\uac01 \uac04\uc120\uc5d0 \uac00\uc911\uce58(\ube44\uc6a9, \uac70\ub9ac \ub4f1)\uac00 \ubd80\uc5ec\ub41c \uadf8\ub798\ud504\uc774\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"A -2\u2192 B\n|     |\n5     1\n\u2193     \u2193\nC -3\u2192 D\n")),(0,a.kt)("h2",{id:"\ud45c\ud604-\ubc29\uc2dd"},"\ud45c\ud604 \ubc29\uc2dd"),(0,a.kt)("h3",{id:"\uc778\uc811-\ub9ac\uc2a4\ud2b8-adjacency-list"},"\uc778\uc811 \ub9ac\uc2a4\ud2b8 (Adjacency List)"),(0,a.kt)("p",null,"\uc778\uc811 \ub9ac\uc2a4\ud2b8\ub294 \uac01 \uc815\uc810\uc5d0, \ud574\ub2f9 \uc815\uc810\uc5d0 \uc5f0\uacb0\ub41c \ub2e4\ub978 \uc815\uc810\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc800\uc7a5\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. \uba54\ubaa8\ub9ac \uc0ac\uc6a9\uc774 \ud6a8\uc728\uc801\uc774\uba70, \uac04\uc120\uc758 \uc218\uac00 \uc801\uc740 \uadf8\ub798\ud504\uc5d0\uc11c \uc720\ub9ac\ud558\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Graph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n        self.graph[u].append(v)\n\n# \uadf8\ub798\ud504 \uc0dd\uc131\ng = Graph()\ng.add_edge('A', 'B')\ng.add_edge('A', 'C')\ng.add_edge('B', 'D')\ng.add_edge('C', 'D')\n\nprint(g.graph) # {'A': ['B', 'C'], 'B': ['D'], 'C': ['D']}\n")),(0,a.kt)("h3",{id:"\uc778\uc811-\ud589\ub82c-adjacency-matrix"},"\uc778\uc811 \ud589\ub82c (Adjacency Matrix)"),(0,a.kt)("p",null,"\uc778\uc811 \ud589\ub82c\uc740 2\ucc28\uc6d0 \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uadf8\ub798\ud504\ub97c \uad6c\ud604\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. \uac01 \ud589\uacfc \uc5f4\uc740 \uc815\uc810\uc744 \ub098\ud0c0\ub0b4\uba70, \ubc30\uc5f4\uc758 \uac12\uc740 \uac04\uc120\uc758 \uc874\uc7ac \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uac04\uc120\uc758 \uc218\uac00 \ub9ce\uc740 \ubc00\uc9d1 \uadf8\ub798\ud504\uc5d0\uc11c \uc720\ub9ac\ud558\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n\n    def add_edge(self, u, v):\n        self.adj_matrix[u][v] = 1\n\n# \uadf8\ub798\ud504 \uc0dd\uc131\ng = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 3)\ng.add_edge(2, 3)\n\nfor row in g.adj_matrix:\n    print(row)\n\n'''\n[0, 1, 1, 0]\n[0, 0, 0, 1]\n[0, 0, 0, 1]\n[0, 0, 0, 0]\n'''\n")),(0,a.kt)("h3",{id:"\uc554\uc2dc\uc801-\uadf8\ub798\ud504-implicit-graph"},"\uc554\uc2dc\uc801 \uadf8\ub798\ud504 (Implicit Graph)"),(0,a.kt)("p",null,"\uc554\uc2dc\uc801 \uadf8\ub798\ud504\ub294 \uc815\uc810\uacfc \uac04\uc120\uc774 \uba85\uc2dc\uc801\uc73c\ub85c \uc800\uc7a5\ub418\uc9c0 \uc54a\uc73c\uba70, \ud2b9\uc815 \uaddc\uce59\uc774\ub098 \ud568\uc218\uc5d0 \uc758\ud574 \ub3d9\uc801\uc73c\ub85c \uacc4\uc0b0\ub41c\ub2e4."),(0,a.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4, 2D \uaca9\uc790\ub85c \ud45c\ud604\ub41c \ubbf8\ub85c\ub97c \ud0d0\uc0c9\ud558\ub294 \ubb38\uc81c\uc5d0\uc11c \ubbf8\ub85c\uc758 \uac01 \uce78\uc744 \uc815\uc810\uc73c\ub85c \ub450\uace0 \uc778\uc811\ud55c \uce78\uc73c\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4\uba74 \uadf8 \uce78\ub4e4 \uc0ac\uc774\uc5d0 \uac04\uc120\uc774 \uc788\ub2e4\uace0 \uac04\uc8fc\ud558\uace0\uc11c \uc815\uc810\uacfc \uac04\uc120\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc800\uc7a5\ud558\uc9c0 \uc54a\uace0 \ud604\uc7ac \uc704\uce58\uc5d0\uc11c \uc774\ub3d9\ud55c \uce78\uc744 \ub3d9\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\uc5ec \ud0d0\uc0c9\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("h2",{id:"\uc21c\ud68c-\ubc29\uc2dd"},"\uc21c\ud68c \ubc29\uc2dd"),(0,a.kt)("h3",{id:"bfs-breadth-first-search"},"BFS (Breadth-First Search)"),(0,a.kt)("p",null,"BFS\ub294 \uc2dc\uc791 \uc815\uc810\uacfc \uac00\uae4c\uc6b4 \uc815\uc810\ub4e4\uc744 \uba3c\uc800 \ubc29\ubb38\ud558\ub294 \uc21c\ud68c \ubc29\uc2dd\uc774\ub2e4. \ucd5c\ub2e8 \uacbd\ub85c\ub97c \ucc3e\ub294 \ubb38\uc81c\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    A\n   / \\\n  B   C\n / \\   \\\nD   E   F\n")),(0,a.kt)("p",null,"\uc704\uc640 \uac19\uc740 \uadf8\ub798\ud504\uac00 \uc788\uc744 \ub54c, A\ub97c \uc2dc\uc791\uc73c\ub85c \uc21c\ud68c\ud558\uba74 \uc21c\ud68c \uc21c\uc11c\ub294 ",(0,a.kt)("inlineCode",{parentName:"p"},"A -> B -> C -> D -> E -> F")," \uc774\ub2e4."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uad6c\ud604")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\ndef bfs(graph, start_v):\n    visited = [start_v]  # \ubc29\ubb38\ud55c \uc815\uc810\ub4e4\uc744 \uc800\uc7a5\ud560 \ub9ac\uc2a4\ud2b8\n    queue = deque([start_v])  # \ud0d0\uc0c9\ud560 \uc815\uc810\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ud050\n\n    while queue:\n        cur_v = queue.popleft()  # \ud050\uc5d0\uc11c \uc815\uc810\uc744 \uaebc\ub0c4\n        for v in graph[cur_v]:  # \ud604\uc7ac \uc815\uc810\uc5d0 \uc5f0\uacb0\ub41c \ubaa8\ub4e0 \uc815\uc810\uc5d0 \ub300\ud574\n            if v not in visited:  # \uc544\uc9c1 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \uc815\uc810\uc774\ub77c\uba74\n                visited.append(v)  # \ubc29\ubb38 \uc815\uc810 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n                queue.append(v)  # \ud050\uc5d0 \ucd94\uac00\ud574\uc11c \ub098\uc911\uc5d0 \ud0d0\uc0c9\ud558\ub3c4\ub85d \ud568\n\n    return visited\n\n# \uadf8\ub798\ud504 \uc815\uc758\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': [],\n    'F': []\n}\n\nbfs_result = bfs(graph, 'A')\nprint(bfs_result) # ['A', 'B', 'C', 'D', 'E', 'F']\n")),(0,a.kt)("h3",{id:"dfs-depth-first-search"},"DFS (Depth-First Search)"),(0,a.kt)("p",null,"DFS\ub294 \uc2dc\uc791 \uc815\uc810\uc5d0\uc11c \uac00\ub2a5\ud55c \uae4a\uc774\uae4c\uc9c0 \uba3c\uc800 \ubc29\ubb38\ud55c \ud6c4, \ub354 \uc774\uc0c1 \ubc29\ubb38\ud560 \uc815\uc810\uc774 \uc5c6\uc73c\uba74 \uc774\uc804 \uc815\uc810\uc73c\ub85c \ub418\ub3cc\uc544\uac00\uc11c \ub098\uba38\uc9c0 \uc815\uc810\ub4e4\uc744 \ubc29\ubb38\ud558\ub294 \uc21c\ud68c \ubc29\uc2dd\uc774\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    A\n   / \\\n  B   C\n / \\   \\\nD   E   F\n")),(0,a.kt)("p",null,"\uc704\uc640 \uac19\uc740 \uadf8\ub798\ud504\uac00 \uc788\uc744 \ub54c, A\ub97c \uc2dc\uc791\uc73c\ub85c \uc21c\ud68c\ud558\uba74 \uc21c\ud68c \uc21c\uc11c\ub294 ",(0,a.kt)("inlineCode",{parentName:"p"},"A -> B -> D -> E -> C -> F")," \uc774\ub2e4."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\uad6c\ud604")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"visited = []\n\ndef dfs(graph, cur_v):\n    visited.append(cur_v)  # \ud604\uc7ac \uc815\uc810\uc744 \ubc29\ubb38 \ucc98\ub9ac\n\n    for v in graph[cur_v]:  # \ud604\uc7ac \uc815\uc810\uacfc \uc5f0\uacb0\ub41c \ubaa8\ub4e0 \uc815\uc810\uc5d0 \ub300\ud574\n        if v not in visited:  # \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \uc815\uc810\uc774 \uc788\ub2e4\uba74\n            dfs(graph, v)  # \uadf8 \uc815\uc810\uc744 \uc2dc\uc791\uc73c\ub85c \uc7ac\uadc0\uc801\uc73c\ub85c DFS \uc218\ud589\n\n    return visited\n\n# \uadf8\ub798\ud504 \uc815\uc758\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': [],\n    'F': []\n}\n\ndfs_result = dfs(graph, 'A')\nprint(dfs_result) # ['A', 'B', 'D', 'E', 'C', 'F']\n")))}o.isMDXComponent=!0}}]);