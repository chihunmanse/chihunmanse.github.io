"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5025],{8308:t=>{t.exports=JSON.parse('{"label":"DataStructure","permalink":"/tags/data-structure","allTagsPath":"/tags","count":6,"items":[{"id":"datastructure-algorithm/graph","title":"Graph","description":"\uadf8\ub798\ud504(G)\ub294 \uc815\uc810(vertex)\ub4e4\uc758 \uc9d1\ud569 V\uc640 \uc774\ub4e4\uc744 \uc5f0\uacb0\ud558\ub294 \uac04\uc120(Edge)\ub4e4\uc758 \uc9d1\ud569 E\ub85c \uad6c\uc131\ub41c \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \uc815\uc810\uc740 \uadf8\ub798\ud504 \ub0b4\uc758 \uac1c\ubcc4\uc801\uc778 \uac1d\uccb4\ub97c \ub098\ud0c0\ub0b4\uba70, \uac04\uc120\uc740 \uc815\uc810 \uac04\uc758 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b8\ub2e4.","permalink":"/datastructure-algorithm/graph"},{"id":"datastructure-algorithm/hashtable","title":"HashTable","description":"\ud574\uc2dc \ud14c\uc774\ube14\uc740 \ud6a8\uc728\uc801\uc778 \ud0d0\uc0c9\uc744 \uc704\ud55c \uc790\ub8cc\uad6c\uc870\ub85c\uc11c key-value \uc30d\uc758 \ub370\uc774\ud130\ub97c \uc785\ub825\ubc1b\ub294\ub2e4. hash function h \uc5d0 key\uac12\uc744 \uc785\ub825\uc73c\ub85c \ub123\uc5b4 \uc5bb\uc740 \ud574\uc2dc\uac12 h(k) \uc5d0 \ud574\ub2f9\ud558\ub294 \uc778\ub371\uc2a4\uc5d0 (key, value) \ub370\uc774\ud130 \uc30d\uc744 \uc800\uc7a5\ud55c\ub2e4. (key, value) \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uac01\uac01\uc758 \uacf5\uac04\uc744 slot \ub610\ub294 bucket\uc774\ub77c\uace0 \ud55c\ub2e4.","permalink":"/datastructure-algorithm/hashtable"},{"id":"datastructure-algorithm/list","title":"List","description":"List\ub294 \uc21c\uc11c\ub97c \uac16\uace0 \uc6d0\uc18c\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. List \uc790\ub8cc\uad6c\uc870\ub294 Array List\uc640 Linked List\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4.","permalink":"/datastructure-algorithm/list"},{"id":"datastructure-algorithm/priority-queue&heap","title":"Priority Queue & Heap","description":"\uc6b0\uc120\uc21c\uc704 \ud050 (Priority Queue)","permalink":"/datastructure-algorithm/priority-queue&heap"},{"id":"datastructure-algorithm/queue&stack","title":"Queue & Stack","description":"\ud050 (Queue)","permalink":"/datastructure-algorithm/queue&stack"},{"id":"datastructure-algorithm/tree","title":"Tree","description":"\ud2b8\ub9ac\ub294 \ub178\ub4dc(Node)\uc640 \uac04\uc120(Edge)\uc73c\ub85c \uad6c\uc131\ub41c \uacc4\uce35\uc801 \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \ud2b8\ub9ac \uad6c\uc870\ub294 \ubd80\ubaa8-\uc790\uc2dd \uad00\uacc4\ub97c \uac00\uc9c0\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ub8e8\ud2b8(Root)\ub77c\uace0 \ubd88\ub9ac\ub294 \ucd5c\uc0c1\uc704 \ub178\ub4dc\ub97c \uac16\uace0 \uc788\ub2e4.","permalink":"/datastructure-algorithm/tree"}]}')}}]);