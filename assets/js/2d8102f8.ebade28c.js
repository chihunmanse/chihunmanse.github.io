"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[746],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=n.createContext({}),u=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(d.Provider,{value:r},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,a=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=u(t),v=l,f=s["".concat(d,".").concat(v)]||s[v]||c[v]||a;return t?n.createElement(f,o(o({ref:r},p),{},{components:t})):n.createElement(f,o({ref:r},p))}));function f(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=v;var i={};for(var d in r)hasOwnProperty.call(r,d)&&(i[d]=r[d]);i.originalType=e,i[s]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},9119:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=t(7462),l=(t(7294),t(3905));const a={title:"Tree",tags:["DataStructure","Tree","BFS","DFS"],sidebar_position:4},o="Tree",i={unversionedId:"datastructure-algorithm/tree",id:"datastructure-algorithm/tree",title:"Tree",description:"\ud2b8\ub9ac\ub294 \ub178\ub4dc(Node)\uc640 \uac04\uc120(Edge)\uc73c\ub85c \uad6c\uc131\ub41c \uacc4\uce35\uc801 \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \ud2b8\ub9ac \uad6c\uc870\ub294 \ubd80\ubaa8-\uc790\uc2dd \uad00\uacc4\ub97c \uac00\uc9c0\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ub8e8\ud2b8(Root)\ub77c\uace0 \ubd88\ub9ac\ub294 \ucd5c\uc0c1\uc704 \ub178\ub4dc\ub97c \uac16\uace0 \uc788\ub2e4.",source:"@site/docs/datastructure-algorithm/tree.md",sourceDirName:"datastructure-algorithm",slug:"/datastructure-algorithm/tree",permalink:"/datastructure-algorithm/tree",draft:!1,tags:[{label:"DataStructure",permalink:"/tags/data-structure"},{label:"Tree",permalink:"/tags/tree"},{label:"BFS",permalink:"/tags/bfs"},{label:"DFS",permalink:"/tags/dfs"}],version:"current",sidebarPosition:4,frontMatter:{title:"Tree",tags:["DataStructure","Tree","BFS","DFS"],sidebar_position:4},sidebar:"docs",previous:{title:"HashTable",permalink:"/datastructure-algorithm/hashtable"},next:{title:"BackEnd",permalink:"/backend"}},d={},u=[{value:"\uc774\uc9c4 \ud2b8\ub9ac (Binary Tree)",id:"\uc774\uc9c4-\ud2b8\ub9ac-binary-tree",level:3},{value:"\uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac (Complete Binary Tree)",id:"\uc644\uc804-\uc774\uc9c4-\ud2b8\ub9ac-complete-binary-tree",level:4},{value:"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac (Binary Search Tree)",id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac-binary-search-tree",level:4},{value:"\uc21c\ud68c \ubc29\uc2dd",id:"\uc21c\ud68c-\ubc29\uc2dd",level:2},{value:"\ub808\ubca8\uc21c\ud68c (Level-order Traversal)",id:"\ub808\ubca8\uc21c\ud68c-level-order-traversal",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604",level:4},{value:"\uc804\uc704\uc21c\ud68c (Preorder Traversal)",id:"\uc804\uc704\uc21c\ud68c-preorder-traversal",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604-1",level:4},{value:"\uc911\uc704\uc21c\ud68c (Inorder Traversal)",id:"\uc911\uc704\uc21c\ud68c-inorder-traversal",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604-2",level:4},{value:"\ud6c4\uc704\uc21c\ud68c (Postorder Traversal)",id:"\ud6c4\uc704\uc21c\ud68c-postorder-traversal",level:3},{value:"\uad6c\ud604",id:"\uad6c\ud604-3",level:4}],p={toc:u},s="wrapper";function c(e){let{components:r,...t}=e;return(0,l.kt)(s,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tree"},"Tree"),(0,l.kt)("p",null,"\ud2b8\ub9ac\ub294 \ub178\ub4dc(Node)\uc640 \uac04\uc120(Edge)\uc73c\ub85c \uad6c\uc131\ub41c \uacc4\uce35\uc801 \uc790\ub8cc\uad6c\uc870\uc774\ub2e4. \ud2b8\ub9ac \uad6c\uc870\ub294 \ubd80\ubaa8-\uc790\uc2dd \uad00\uacc4\ub97c \uac00\uc9c0\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ub8e8\ud2b8(Root)\ub77c\uace0 \ubd88\ub9ac\ub294 \ucd5c\uc0c1\uc704 \ub178\ub4dc\ub97c \uac16\uace0 \uc788\ub2e4."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ub178\ub4dc (Node) : \ud2b8\ub9ac\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 \uae30\ubcf8\uc801\uc778 \ub2e8\uc704, \uadf8\ub798\ud504\uc758 \uc815\uc810(Vertex)"),(0,l.kt)("li",{parentName:"ul"},"\uac04\uc120 (Edge) : \ub178\ub4dc\uc640 \ub178\ub4dc\ub97c \uc5f0\uacb0\ud558\ub294 \uc5f0\uacb0\uc120"),(0,l.kt)("li",{parentName:"ul"},"\ub8e8\ud2b8 \ub178\ub4dc (Root) : \ubd80\ubaa8 \ub178\ub4dc\uac00 \uc5c6\ub294, \ud2b8\ub9ac\uc758 \ucd5c\uc0c1\uc704 \ub178\ub4dc"),(0,l.kt)("li",{parentName:"ul"},"\ub9ac\ud504 \ub178\ub4dc (Leef) : \uc790\uc2dd \ub178\ub4dc\uac00 \uc5c6\ub294, \ud2b8\ub9ac\uc758 \uac00\uc7a5 \ub05d\uc5d0 \uc704\uce58\ud55c \ub178\ub4dc\ub4e4"),(0,l.kt)("li",{parentName:"ul"},"\ucc28\uc218 (degree) : \uac01 \ub178\ub4dc\uac00 \uac16\ub294 \uc790\uc2dd\uc758 \uc218. \ubaa8\ub4e0 \ub178\ub4dc\uc758 \ucc28\uc218\uac00 n\uac1c \uc774\ud558\uc778 \ud2b8\ub9ac\ub97c n\uc9c4 \ud2b8\ub9ac\ub77c\uace0 \ud55c\ub2e4."),(0,l.kt)("li",{parentName:"ul"},"\uc870\uc0c1 (ancestor) : \uc704\ucabd\uc73c\ub85c \uac04\uc120\uc744 \ub530\ub77c\uac00\uba74 \ub9cc\ub098\ub294 \ubaa8\ub4e0 \ub178\ub4dc"),(0,l.kt)("li",{parentName:"ul"},"\uc790\uc190 (descendant) : \uc544\ub798\ucabd\uc73c\ub85c \uac04\uc120\uc744 \ub530\ub77c\uac00\uba74 \ub9cc\ub098\ub294 \ubaa8\ub4e0 \ub178\ub4dc"),(0,l.kt)("li",{parentName:"ul"},"\ub192\uc774 (height) : \ub8e8\ud2b8 \ub178\ub4dc\uc5d0\uc11c \uac00\uc7a5 \uba40\ub9ac \uc788\ub294 \ub9ac\ud504 \ub178\ub4dc \uae4c\uc9c0\uc758 \uac70\ub9ac. \uc989, \ub9ac\ud504 \ub178\ud2b8\uc911\uc5d0 \ucd5c\ub300 \ub808\ubca8 \uac12"),(0,l.kt)("li",{parentName:"ul"},"\uc11c\ube0c\ud2b8\ub9ac (subtree) : \ud2b8\ub9ac\uc5d0\uc11c \ud558\ub098\uc758 \ub178\ub4dc\uc640 \uadf8 \uc790\uc2dd \ub178\ub4dc\ub4e4\uc774 \uc774\ub8e8\ub294 \ud558\uc704 \ud2b8\ub9ac"),(0,l.kt)("li",{parentName:"ul"},"\ub808\ubca8 (Level) : \ub8e8\ud2b8 \ub178\ub4dc\uc5d0\uc11c \ub5a8\uc5b4\uc9c4 \uac70\ub9ac")),(0,l.kt)("h3",{id:"\uc774\uc9c4-\ud2b8\ub9ac-binary-tree"},"\uc774\uc9c4 \ud2b8\ub9ac (Binary Tree)"),(0,l.kt)("p",null,"\uc774\uc9c4 \ud2b8\ub9ac\ub294 \uac01 \ub178\ub4dc\uac00 \ucd5c\ub300 \ub450 \uac1c\uc758 \uc790\uc2dd \ub178\ub4dc\ub97c \uac00\uc9c0\ub294 \ud2b8\ub9ac\uc774\ub2e4."),(0,l.kt)("h4",{id:"\uc644\uc804-\uc774\uc9c4-\ud2b8\ub9ac-complete-binary-tree"},"\uc644\uc804 \uc774\uc9c4 \ud2b8\ub9ac (Complete Binary Tree)"),(0,l.kt)("p",null,"\uc67c\ucabd\uc5d0\uc11c\ubd80\ud130 \ucc44\uc6cc\uc838 \uc788\ub294 \uc774\uc9c4 \ud2b8\ub9ac\ub85c, \ub9c8\uc9c0\ub9c9 \ub808\ubca8\uc744 \uc81c\uc678\ud558\uace0\ub294 \ubaa8\ub4e0 \ub808\ubca8\uc774 \uc644\uc804\ud788 \ucc44\uc6cc\uc838\uc788\ub294 \ud2b8\ub9ac\uc774\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      1\n     / \\\n    2   3\n   / \\ /\n  4  5 6\n\n")),(0,l.kt)("h4",{id:"\uc774\uc9c4-\ud0d0\uc0c9-\ud2b8\ub9ac-binary-search-tree"},"\uc774\uc9c4 \ud0d0\uc0c9 \ud2b8\ub9ac (Binary Search Tree)"),(0,l.kt)("p",null,"\uac01 \ub178\ub4dc\uc758 \uc67c\ucabd \ub178\ub4dc\ub294 \ubd80\ubaa8 \ub178\ub4dc\ubcf4\ub2e4 \uc791\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc624\ub978\ucabd \ub178\ub4dc\ub294 \ub354 \ud070 \uac12\uc744 \uac00\uc9c4\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      8\n     / \\\n    3   10\n   / \\    \\\n  1   6    14\n     / \\   /\n    4   7 13\n")),(0,l.kt)("h2",{id:"\uc21c\ud68c-\ubc29\uc2dd"},"\uc21c\ud68c \ubc29\uc2dd"),(0,l.kt)("p",null,"\ud2b8\ub9ac \uc21c\ud68c\ub294 \ud2b8\ub9ac \uad6c\uc870\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ub178\ub4dc\ub97c \uc77c\uc815\ud55c \uc21c\uc11c\uc5d0 \ub530\ub77c \ubc29\ubb38\ud558\ub294 \uacfc\uc815\uc744 \ub9d0\ud55c\ub2e4."),(0,l.kt)("h3",{id:"\ub808\ubca8\uc21c\ud68c-level-order-traversal"},"\ub808\ubca8\uc21c\ud68c (Level-order Traversal)"),(0,l.kt)("p",null,"\ub808\ubca8\uc21c\ud68c\ub294 \ud2b8\ub9ac\uc758 \uac01 \ub808\ubca8\uc744 \ucc28\ub840\ub300\ub85c \ubc29\ubb38\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. \ub8e8\ud2b8 \ub178\ub4dc\ubd80\ud130 \uc2dc\uc791\ud558\uc5ec, \uac19\uc740 \ub808\ubca8\uc758 \ub178\ub4dc\ub4e4\uc744 \ubc29\ubb38\ud55c \ud6c4 \uadf8 \ub2e4\uc74c \ub808\ubca8\ub85c \uc774\ub3d9\ud55c\ub2e4. \uc8fc\ub85c \ud050(Queue) \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      A\n     / \\\n    B   C\n   / \\   \\\n  D   E   F\n")),(0,l.kt)("p",null,"\ub808\ubca8\uc21c\ud68c \uacb0\uacfc : ",(0,l.kt)("inlineCode",{parentName:"p"},"A \u2192 B \u2192 C \u2192 D \u2192 E \u2192 F")),(0,l.kt)("h4",{id:"\uad6c\ud604"},"\uad6c\ud604"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef level_order_traversal(root):\n    visted = []\n\n    if root is None:\n        return\n\n    queue = deque([root])\n    while queue:\n        node = queue.popleft()  # \ud050\uc5d0\uc11c \ub178\ub4dc \uaebc\ub0b4\uae30\n        visted.append(node.value) # \ub178\ub4dc \ubc29\ubb38\n        if node.left:\n            queue.append(node.left)  # \uc67c\ucabd \uc790\uc2dd \ucd94\uac00\n        if node.right:\n            queue.append(node.right)  # \uc624\ub978\ucabd \uc790\uc2dd \ucd94\uac00\n\n    return visted\n\n# \ud2b8\ub9ac \uc0dd\uc131 \ubc0f \ub808\ubca8\uc21c\ud68c \uc2e4\ud589 \uc608\uc2dc\nroot = Node('A')\nroot.left = Node('B')\nroot.right = Node('C')\nroot.left.left = Node('D')\nroot.left.right = Node('E')\nroot.right.right = Node('F')\n\nprint(level_order_traversal(root)) # ['A', 'B', 'C', 'D', 'E', 'F']\n")),(0,l.kt)("h3",{id:"\uc804\uc704\uc21c\ud68c-preorder-traversal"},"\uc804\uc704\uc21c\ud68c (Preorder Traversal)"),(0,l.kt)("p",null,"\uc804\uc704\uc21c\ud68c\ub294 \ub8e8\ud2b8 \ub178\ub4dc\ub97c \uac00\uc7a5 \uba3c\uc800 \ubc29\ubb38\ud558\ub294 \uc21c\ud68c \ubc29\uc2dd\uc774\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      A\n     / \\\n    B   C\n   / \\   \\\n  D   E   F\n")),(0,l.kt)("p",null,"\uc804\uc704\uc21c\ud68c \uacb0\uacfc : ",(0,l.kt)("inlineCode",{parentName:"p"},"A \u2192 B \u2192 D \u2192 E \u2192 C \u2192 F")),(0,l.kt)("h4",{id:"\uad6c\ud604-1"},"\uad6c\ud604"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nvisted = []\n\ndef preorder_traversal(node):\n    if node is None:\n        return\n\n    visted.append(node.value)  # \ub8e8\ud2b8 \ub178\ub4dc \ubc29\ubb38\n    preorder_traversal(node.left)  # \uc67c\ucabd \uc790\uc2dd \ubc29\ubb38\n    preorder_traversal(node.right)  # \uc624\ub978\ucabd \uc790\uc2dd \ubc29\ubb38\n\n    return visted\n\n# \ud2b8\ub9ac \uc0dd\uc131 \ubc0f \uc804\uc704\uc21c\ud68c \uc2e4\ud589 \uc608\uc2dc\nroot = Node('A')\nroot.left = Node('B')\nroot.right = Node('C')\nroot.left.left = Node('D')\nroot.left.right = Node('E')\nroot.right.right = Node('F')\n\nprint(preorder_traversal(root))  # ['A', 'B', 'D', 'E', 'C', 'F']\n")),(0,l.kt)("h3",{id:"\uc911\uc704\uc21c\ud68c-inorder-traversal"},"\uc911\uc704\uc21c\ud68c (Inorder Traversal)"),(0,l.kt)("p",null,"\uc911\uc704\uc21c\ud68c\ub294 \uc67c\ucabd \uc790\uc2dd\uc744 \uba3c\uc800 \ubc29\ubb38\ud558\uace0, \uadf8 \ub2e4\uc74c \ub8e8\ud2b8 \ub178\ub4dc\ub97c \ubc29\ubb38\ud55c \ub4a4, \uc624\ub978\ucabd \uc790\uc2dd\uc744 \ubc29\ubb38\ud558\ub294 \uc21c\ud68c \ubc29\uc2dd\uc774\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      A\n     / \\\n    B   C\n   / \\   \\\n  D   E   F\n")),(0,l.kt)("p",null,"\uc911\uc704\uc21c\ud68c \uacb0\uacfc : ",(0,l.kt)("inlineCode",{parentName:"p"},"D \u2192 B \u2192 E \u2192 A \u2192 C \u2192 F")),(0,l.kt)("h4",{id:"\uad6c\ud604-2"},"\uad6c\ud604"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nvisted = []\n\ndef inorder_traversal(node):\n    if node is None:\n        return\n\n    inorder_traversal(node.left)  # \uc67c\ucabd \uc790\uc2dd \ubc29\ubb38\n    visted.append(node.value)  # \ub8e8\ud2b8 \ub178\ub4dc \ubc29\ubb38\n    inorder_traversal(node.right)  # \uc624\ub978\ucabd \uc790\uc2dd \ubc29\ubb38\n\n    return visted\n\n# \ud2b8\ub9ac \uc0dd\uc131 \ubc0f \uc911\uc704\uc21c\ud68c \uc2e4\ud589 \uc608\uc2dc\nroot = Node('A')\nroot.left = Node('B')\nroot.right = Node('C')\nroot.left.left = Node('D')\nroot.left.right = Node('E')\nroot.right.right = Node('F')\n\nprint(inorder_traversal(root))  # ['D', 'B', 'E', 'A', 'C', 'F']\n")),(0,l.kt)("h3",{id:"\ud6c4\uc704\uc21c\ud68c-postorder-traversal"},"\ud6c4\uc704\uc21c\ud68c (Postorder Traversal)"),(0,l.kt)("p",null,"\ud6c4\uc704\uc21c\ud68c\ub294 \ub8e8\ud2b8 \ub178\ub4dc\ub97c \ub9c8\uc9c0\ub9c9\uc5d0 \ubc29\ubb38\ud558\ub294 \uc21c\ud68c \ubc29\uc2dd\uc774\ub2e4."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"      A\n     / \\\n    B   C\n   / \\   \\\n  D   E   F\n")),(0,l.kt)("p",null,"\ud6c4\uc704\uc21c\ud68c \uacb0\uacfc : ",(0,l.kt)("inlineCode",{parentName:"p"},"D \u2192 E \u2192 B \u2192 F \u2192 C \u2192 A")),(0,l.kt)("h4",{id:"\uad6c\ud604-3"},"\uad6c\ud604"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nvisted = []\n\ndef postorder_traversal(node):\n    if node is None:\n        return\n\n    postorder_traversal(node.left)  # \uc67c\ucabd \uc790\uc2dd \ubc29\ubb38\n    postorder_traversal(node.right)  # \uc624\ub978\ucabd \uc790\uc2dd \ubc29\ubb38\n    visted.append(node.value)  # \ub8e8\ud2b8 \ub178\ub4dc \ubc29\ubb38\n\n    return visted\n\n# \ud2b8\ub9ac \uc0dd\uc131 \ubc0f \ud6c4\uc704\uc21c\ud68c \uc2e4\ud589 \uc608\uc2dc\nroot = Node('A')\nroot.left = Node('B')\nroot.right = Node('C')\nroot.left.left = Node('D')\nroot.left.right = Node('E')\nroot.right.right = Node('F')\n\nprint(postorder_traversal(root))  # ['D', 'E', 'B', 'F', 'C', 'A']\n")))}c.isMDXComponent=!0}}]);